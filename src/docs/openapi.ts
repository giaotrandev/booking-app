import { OpenAPIV3 } from 'openapi-types';

export const apiSpecification: OpenAPIV3.Document = {
  openapi: '3.0.0',
  info: {
    title: 'Booking App API',
    version: '1.0.0',
    description: `
    # Booking App REST API
    
    API documentation cho h·ªá th·ªëng ƒë·∫∑t v√© xe kh√°ch - Booking App.
    
    ## T√≠nh nƒÉng ch√≠nh
    - üîê X√°c th·ª±c & Ph√¢n quy·ªÅn
    - üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng
    - üìÖ Qu·∫£n l√Ω ƒë·∫∑t v√© xe kh√°ch
    - üè® Qu·∫£n l√Ω v√© xe kh√°ch
    `,
    contact: {
      name: 'API Support',
      email: 'support@bookingapp.com',
    },
    license: {
      name: 'MIT License',
      url: 'https://opensource.org/licenses/MIT',
    },
  },
  servers: [
    {
      url: process.env.WEBSERVICE_URL || 'http://localhost:5000/api',
      description: 'Test web server',
    },
  ],
  tags: [
    {
      name: 'Authentication',
      description: 'Authentication endpoints',
    },
    {
      name: 'User',
      description: 'User management endpoints',
    },
    {
      name: 'Geography',
      description: 'Geographic information endpoints',
    },
    {
      name: 'Role',
      description: 'Role management endpoints',
    },
    {
      name: 'Permission',
      description: 'Permission management endpoints',
    },
    {
      name: 'Post',
      description: 'Post management endpoints',
    },
    {
      name: 'Category',
      description: 'Category management endpoints',
    },
    {
      name: 'Tag',
      description: 'Tag management endpoints',
    },
    {
      name: 'Route',
      description: 'Route management endpoints',
    },
    {
      name: 'Bus Stop',
      description: 'Bus stop management endpoints',
    },
    {
      name: 'Route Stop',
      description: 'Route stop management endpoints',
    },
    {
      name: 'Vehicle Type',
      description: 'Vehicle type management endpoints',
    },
    {
      name: 'Vehicle',
      description: 'Vehicle management endpoints',
    },
    {
      name: 'Trip',
      description: 'Trip management endpoints',
    },
    {
      name: 'Booking',
      description: 'Booking management endpoints',
    },
    {
      name: 'Realtime',
      description: 'Real-time booking, room management and other endpoints using Socket.IO',
    },
  ],
  paths: {
    // Authentication
    '/auth/register': {
      post: {
        tags: ['Authentication'],
        summary: 'ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi',
        description: 'ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi v√† g·ª≠i email x√°c th·ª±c',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  firstName: {
                    type: 'string',
                    example: 'John',
                    description: 'T√™n',
                  },
                  lastName: {
                    type: 'string',
                    example: 'Doe',
                    description: 'H·ªç',
                  },
                  email: {
                    type: 'string',
                    format: 'email',
                    example: 'john@example.com',
                  },
                  password: {
                    type: 'string',
                    format: 'password',
                    example: 'Password123!',
                    minLength: 8,
                  },
                  gender: {
                    type: 'string',
                    enum: ['MALE', 'FEMALE'],
                    example: 'MALE',
                  },
                  phoneNumber: {
                    type: 'string',
                    example: '+84123456789',
                  },
                  birthday: {
                    type: 'string',
                    format: 'date',
                    example: '1998-05-15',
                    description: 'Ng√†y sinh (YYYY-MM-DD)',
                  },
                  address: {
                    type: 'string',
                    example: 'Ho Chi Minh City',
                  },
                },
                required: ['firstName', 'lastName', 'email', 'password', 'gender', 'birthday'],
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'Verification email sent' },
                    data: {
                      type: 'object',
                      properties: {
                        id: { type: 'string', example: '507f1f77bcf86cd799439011' },
                        firstName: { type: 'string', example: 'John' },
                        lastName: { type: 'string', example: 'Doe' },
                        email: { type: 'string', example: 'john@example.com' },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'Email already exists' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/auth/verify-email/{token}': {
      post: {
        tags: ['Authentication'],
        summary: 'X√°c th·ª±c email',
        parameters: [
          {
            name: 'token',
            in: 'path',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c',
          },
          '400': {
            description: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n',
          },
        },
      },
    },
    '/auth/resend-verification': {
      post: {
        tags: ['Authentication'],
        summary: 'G·ª≠i l·∫°i email x√°c th·ª±c',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  email: { type: 'string', format: 'email' },
                },
                required: ['email'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒê√£ g·ª≠i l·∫°i email x√°c th·ª±c',
          },
        },
      },
    },
    '/auth/check-verification-token/{token}': {
      get: {
        tags: ['Authentication'],
        summary: 'Ki·ªÉm tra token x√°c th·ª±c email',
        parameters: [
          {
            name: 'token',
            in: 'path',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Token h·ª£p l·ªá',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    isValid: { type: 'boolean' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n',
          },
        },
      },
    },
    '/auth/check-reset-token/{token}': {
      get: {
        tags: ['Authentication'],
        summary: 'Ki·ªÉm tra token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
        parameters: [
          {
            name: 'token',
            in: 'path',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Token h·ª£p l·ªá',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    isValid: { type: 'boolean' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n',
          },
        },
      },
    },
    '/auth/login': {
      post: {
        tags: ['Authentication'],
        summary: 'ƒêƒÉng nh·∫≠p',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  email: { type: 'string', format: 'email' },
                  password: { type: 'string' },
                  rememberMe: { type: 'boolean' },
                },
                required: ['email', 'password'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    accessToken: { type: 'string' },
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        email: { type: 'string' },
                        role: { type: 'string' },
                        permissions: {
                          type: 'array',
                          items: { type: 'string' },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/auth/forgot-password': {
      post: {
        tags: ['Authentication'],
        summary: 'Qu√™n m·∫≠t kh·∫©u',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  email: { type: 'string', format: 'email' },
                },
                required: ['email'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒê√£ g·ª≠i email kh√¥i ph·ª•c m·∫≠t kh·∫©u',
          },
        },
      },
    },
    '/auth/reset-password': {
      post: {
        tags: ['Authentication'],
        summary: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  token: { type: 'string' },
                  password: { type: 'string' },
                  confirmPassword: { type: 'string' },
                },
                required: ['token', 'password', 'confirmPassword'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng',
          },
        },
      },
    },
    '/auth/change-password': {
      post: {
        tags: ['Authentication'],
        summary: 'ƒê·ªïi m·∫≠t kh·∫©u',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  currentPassword: { type: 'string', format: 'password' },
                  newPassword: { type: 'string', format: 'password' },
                  confirmPassword: { type: 'string', format: 'password' },
                },
                required: ['currentPassword', 'newPassword', 'confirmPassword'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c m·∫≠t kh·∫©u kh√¥ng kh·ªõp',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
        },
      },
    },
    '/auth/google': {
      get: {
        tags: ['Authentication'],
        summary: 'ƒêƒÉng nh·∫≠p b·∫±ng Google',
        responses: {
          '302': {
            description: 'Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p Google',
          },
        },
      },
    },
    '/auth/google/callback': {
      get: {
        tags: ['Authentication'],
        summary: 'Callback URL cho ƒëƒÉng nh·∫≠p Google',
        responses: {
          '200': {
            description: 'ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng',
          },
        },
      },
    },
    '/auth/refresh-access-token': {
      post: {
        tags: ['Authentication'],
        summary: 'L√†m m·ªõi access token',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  refreshToken: { type: 'string' },
                },
                required: ['refreshToken'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    accessToken: { type: 'string' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n',
          },
        },
      },
    },
    '/auth/logout': {
      post: {
        tags: ['Authentication'],
        summary: 'ƒêƒÉng xu·∫•t',
        security: [{ bearerAuth: [] }],
        responses: {
          '200': {
            description: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng',
          },
        },
      },
    },
    '/auth/logout-all-devices': {
      post: {
        tags: ['Authentication'],
        summary: 'ƒêƒÉng xu·∫•t kh·ªèi t·∫•t c·∫£ thi·∫øt b·ªã',
        security: [{ bearerAuth: [] }],
        responses: {
          '200': {
            description: 'ƒê√£ ƒëƒÉng xu·∫•t kh·ªèi t·∫•t c·∫£ thi·∫øt b·ªã',
          },
        },
      },
    },
    // User
    '/users': {
      get: {
        tags: ['User'],
        summary: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng',
        description: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm',
          },
          {
            in: 'query',
            name: 'searchFields',
            schema: { type: 'string' },
            description: 'C√°c tr∆∞·ªùng t√¨m ki·∫øm, c√°ch nhau b·ªüi d·∫•u ph·∫©y (m·∫∑c ƒë·ªãnh: name,email,phoneNumber)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"name","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"AVAILABLE"})',
          },
          {
            in: 'query',
            name: 'returnAll',
            schema: { type: 'boolean' },
            description: 'Tr·∫£ v·ªÅ t·∫•t c·∫£ d·ªØ li·ªáu (b·ªè qua ph√¢n trang)',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch ng∆∞·ªùi d√πng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          firstName: { type: 'string' },
                          lastName: { type: 'string' },
                          email: { type: 'string' },
                          phoneNumber: { type: 'string' },
                          birthday: {
                            type: 'string',
                            format: 'date',
                            example: '1998-05-15',
                            description: 'Ng√†y sinh (YYYY-MM-DD)',
                          },
                          gender: { type: 'string', enum: ['MALE', 'FEMALE'] },
                          status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                          avatar: { type: 'string', nullable: true },
                          address: { type: 'string', nullable: true },
                          role: {
                            type: 'object',
                            properties: {
                              name: { type: 'string' },
                              permissions: {
                                type: 'array',
                                items: {
                                  type: 'object',
                                  properties: {
                                    code: { type: 'string' },
                                    name: { type: 'string' },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_USER_MANAGE)',
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/{id}': {
      get: {
        tags: ['User'],
        summary: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
        description: 'L·∫•y chi ti·∫øt ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE ho·∫∑c SELF_ACCESS)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Th√¥ng tin ng∆∞·ªùi d√πng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        firstName: { type: 'string' },
                        lastName: { type: 'string' },
                        email: { type: 'string' },
                        phoneNumber: { type: 'string', nullable: true },
                        birthday: {
                          type: 'string',
                          format: 'date',
                          nullable: true,
                        },
                        gender: { type: 'string', enum: ['MALE', 'FEMALE'], nullable: true },
                        status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                        avatar: { type: 'string', nullable: true },
                        address: { type: 'string', nullable: true },
                        avatarUrl: { type: 'string', nullable: true },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                            permissions: {
                              type: 'array',
                              items: {
                                type: 'object',
                                properties: {
                                  code: { type: 'string' },
                                  name: { type: 'string' },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['User'],
        summary: 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  firstName: { type: 'string', description: 'T√™n ng∆∞·ªùi d√πng' },
                  lastName: { type: 'string', description: 'H·ªç ng∆∞·ªùi d√πng' },
                  email: { type: 'string', format: 'email', description: 'Email (y√™u c·∫ßu x√°c th·ª±c n·∫øu thay ƒë·ªïi)' },
                  phoneNumber: { type: 'string', description: 'S·ªë ƒëi·ªán tho·∫°i' },
                  gender: { type: 'string', enum: ['MALE', 'FEMALE'], description: 'Gi·ªõi t√≠nh' },
                  birthday: {
                    type: 'string',
                    format: 'date',
                    example: '1998-05-15',
                    description: 'Ng√†y sinh (YYYY-MM-DD)',
                  },
                  address: { type: 'string', description: 'ƒê·ªãa ch·ªâ' },
                  status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'], description: 'Tr·∫°ng th√°i (admin only)' },
                  avatar: { type: 'string', format: 'binary', description: 'File ·∫£nh ƒë·∫°i di·ªán' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        firstName: { type: 'string' },
                        lastName: { type: 'string' },
                        email: { type: 'string' },
                        phoneNumber: { type: 'string', nullable: true },
                        birthday: {
                          type: 'string',
                          format: 'date',
                          nullable: true,
                        },
                        gender: { type: 'string', enum: ['MALE', 'FEMALE'], nullable: true },
                        status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                        avatar: { type: 'string', nullable: true },
                        address: { type: 'string', nullable: true },
                        avatarUrl: { type: 'string', nullable: true },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['User'],
        summary: 'X√≥a m·ªÅm ng∆∞·ªùi d√πng',
        description: 'X√≥a m·ªÅm ng∆∞·ªùi d√πng b·∫±ng c√°ch ƒë·∫∑t tr·∫°ng th√°i th√†nh DISABLED (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a m·ªÅm th√†nh c√¥ng',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/avatar/{id}': {
      get: {
        tags: ['User'],
        summary: 'L·∫•y avatar ng∆∞·ªùi d√πng',
        description: 'L·∫•y URL avatar c·ªßa ng∆∞·ªùi d√πng (c√¥ng khai)',
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'URL avatar c·ªßa ng∆∞·ªùi d√πng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                      },
                    },
                    avatarUrl: { type: 'string', nullable: true },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['User'],
        summary: 'Upload avatar ng∆∞·ªùi d√πng',
        description: 'Upload ·∫£nh ƒë·∫°i di·ªán cho ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE ho·∫∑c SELF_ACCESS)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  avatar: {
                    type: 'string',
                    format: 'binary',
                    description: 'File ·∫£nh ƒë·∫°i di·ªán',
                  },
                },
                required: ['avatar'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Upload avatar th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        avatar: { type: 'string' },
                      },
                    },
                    avatarUrl: { type: 'string' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Kh√¥ng c√≥ file ƒë∆∞·ª£c upload',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/{id}/change-password': {
      post: {
        tags: ['User'],
        summary: 'Thay ƒë·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng',
        description: 'Thay ƒë·ªïi m·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  newPassword: { type: 'string', format: 'password', description: 'M·∫≠t kh·∫©u m·ªõi' },
                },
                required: ['newPassword'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Thay ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/{id}/restore': {
      post: {
        tags: ['User'],
        summary: 'Kh√¥i ph·ª•c ng∆∞·ªùi d√πng',
        description: 'Kh√¥i ph·ª•c ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a m·ªÅm (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Kh√¥i ph·ª•c th√†nh c√¥ng',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/{id}/role': {
      put: {
        tags: ['User'],
        summary: 'G√°n vai tr√≤ cho ng∆∞·ªùi d√πng',
        description: 'G√°n vai tr√≤ cho ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  roleName: { type: 'string', description: 'T√™n vai tr√≤' },
                },
                required: ['roleName'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'G√°n vai tr√≤ th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        email: { type: 'string' },
                        roleName: { type: 'string' },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                            permissions: {
                              type: 'array',
                              items: {
                                type: 'object',
                                properties: {
                                  code: { type: 'string' },
                                  name: { type: 'string' },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/role/{roleName}': {
      put: {
        tags: ['User'],
        summary: 'L·∫•y ng∆∞·ªùi d√πng theo vai tr√≤',
        description: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng c√≥ vai tr√≤ c·ª• th·ªÉ (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'roleName',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'T√™n vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch ng∆∞·ªùi d√πng theo vai tr√≤',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        name: { type: 'string' },
                      },
                    },
                    users: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          email: { type: 'string' },
                          phoneNumber: { type: 'string', nullable: true },
                          status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                          avatar: { type: 'string', nullable: true },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/profile': {
      get: {
        tags: ['User'],
        summary: 'L·∫•y th√¥ng tin c√° nh√¢n',
        description: 'L·∫•y th√¥ng tin c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        firstName: { type: 'string' },
                        lastName: { type: 'string' },
                        email: { type: 'string' },
                        phoneNumber: { type: 'string', nullable: true },
                        birthday: {
                          type: 'string',
                          format: 'date',
                          nullable: true,
                        },
                        gender: { type: 'string', enum: ['MALE', 'FEMALE'], nullable: true },
                        status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                        avatar: { type: 'string', nullable: true },
                        address: { type: 'string', nullable: true },
                        avatarUrl: { type: 'string', nullable: true },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                            permissions: {
                              type: 'array',
                              items: {
                                type: 'object',
                                properties: {
                                  code: { type: 'string' },
                                  name: { type: 'string' },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['User'],
        summary: 'C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  firstName: { type: 'string', description: 'T√™n ng∆∞·ªùi d√πng' },
                  lastName: { type: 'string', description: 'H·ªç ng∆∞·ªùi d√πng' },
                  phoneNumber: { type: 'string', description: 'S·ªë ƒëi·ªán tho·∫°i' },
                  gender: { type: 'string', enum: ['MALE', 'FEMALE'], description: 'Gi·ªõi t√≠nh' },
                  birthday: {
                    type: 'string',
                    format: 'date',
                    example: '1998-05-15',
                    description: 'Ng√†y sinh (YYYY-MM-DD)',
                  },
                  address: { type: 'string', description: 'ƒê·ªãa ch·ªâ' },
                  avatar: { type: 'string', format: 'binary', description: 'File ·∫£nh ƒë·∫°i di·ªán' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        firstName: { type: 'string' },
                        lastName: { type: 'string' },
                        email: { type: 'string' },
                        phoneNumber: { type: 'string', nullable: true },
                        birthday: {
                          type: 'string',
                          format: 'date',
                          nullable: true,
                        },
                        gender: { type: 'string', enum: ['MALE', 'FEMALE'], nullable: true },
                        status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                        avatar: { type: 'string', nullable: true },
                        address: { type: 'string', nullable: true },
                        avatarUrl: { type: 'string', nullable: true },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Geo
    '/geo/provinces': {
      get: {
        tags: ['Geography'],
        summary: 'L·∫•y danh s√°ch t·∫•t c·∫£ t·ªânh/th√†nh ph·ªë',
        description: 'L·∫•y danh s√°ch t·∫•t c·∫£ t·ªânh/th√†nh ph·ªë (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch t·ªânh/th√†nh ph·ªë',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    provinces: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          code: { type: 'string' },
                          latitude: { type: 'number', nullable: true },
                          longitude: { type: 'number', nullable: true },
                          status: { type: 'string' },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/provinces/{idOrCode}': {
      get: {
        tags: ['Geography'],
        summary: 'L·∫•y chi ti·∫øt t·ªânh/th√†nh ph·ªë',
        description: 'L·∫•y chi ti·∫øt m·ªôt t·ªânh/th√†nh ph·ªë theo ID ho·∫∑c m√£ (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'idOrCode',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID ho·∫∑c m√£ c·ªßa t·ªânh/th√†nh ph·ªë',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt t·ªânh/th√†nh ph·ªë',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    province: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        code: { type: 'string' },
                        latitude: { type: 'number', nullable: true },
                        longitude: { type: 'number', nullable: true },
                        status: { type: 'string' },
                        districts: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              name: { type: 'string' },
                              latitude: { type: 'number', nullable: true },
                              longitude: { type: 'number', nullable: true },
                              status: { type: 'string' },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/provinces/{provinceIdOrCode}/districts': {
      get: {
        tags: ['Geography'],
        summary: 'L·∫•y danh s√°ch qu·∫≠n/huy·ªán c·ªßa t·ªânh/th√†nh ph·ªë',
        description: 'L·∫•y danh s√°ch qu·∫≠n/huy·ªán thu·ªôc m·ªôt t·ªânh/th√†nh ph·ªë (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'provinceIdOrCode',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID ho·∫∑c m√£ c·ªßa t·ªânh/th√†nh ph·ªë',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch qu·∫≠n/huy·ªán',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    province: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        code: { type: 'string' },
                      },
                    },
                    districts: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          latitude: { type: 'number', nullable: true },
                          longitude: { type: 'number', nullable: true },
                          status: { type: 'string' },
                          _count: {
                            type: 'object',
                            properties: {
                              wards: { type: 'number' },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/districts/{districtIdOrCode}': {
      get: {
        tags: ['Geography'],
        summary: 'L·∫•y chi ti·∫øt qu·∫≠n/huy·ªán',
        description: 'L·∫•y chi ti·∫øt m·ªôt qu·∫≠n/huy·ªán theo ID (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'districtIdOrCode',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa qu·∫≠n/huy·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt qu·∫≠n/huy·ªán',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    district: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        latitude: { type: 'number', nullable: true },
                        longitude: { type: 'number', nullable: true },
                        status: { type: 'string' },
                        wards: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              name: { type: 'string' },
                              latitude: { type: 'number', nullable: true },
                              longitude: { type: 'number', nullable: true },
                              status: { type: 'string' },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y qu·∫≠n/huy·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/districts/{districtIdOrCode}/wards': {
      get: {
        tags: ['Geography'],
        summary: 'L·∫•y danh s√°ch ph∆∞·ªùng/x√£ c·ªßa qu·∫≠n/huy·ªán',
        description: 'L·∫•y danh s√°ch ph∆∞·ªùng/x√£ thu·ªôc m·ªôt qu·∫≠n/huy·ªán (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'districtIdOrCode',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa qu·∫≠n/huy·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch ph∆∞·ªùng/x√£',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    district: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                      },
                    },
                    wards: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          latitude: { type: 'number', nullable: true },
                          longitude: { type: 'number', nullable: true },
                          status: { type: 'string' },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y qu·∫≠n/huy·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/search': {
      get: {
        tags: ['Geography'],
        summary: 'T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm',
        description: 'T√¨m ki·∫øm t·ªânh/th√†nh ph·ªë, qu·∫≠n/huy·ªán, ph∆∞·ªùng/x√£ theo t·ª´ kh√≥a (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'query',
            schema: { type: 'string' },
            required: true,
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm (t·ªëi thi·ªÉu 2 k√Ω t·ª±)',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    results: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          latitude: { type: 'number', nullable: true },
                          longitude: { type: 'number', nullable: true },
                          status: { type: 'string' },
                          type: { type: 'string', enum: ['PROVINCE', 'DISTRICT', 'WARD'] },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm qu√° ng·∫Øn ho·∫∑c kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Role
    '/roles': {
      get: {
        tags: ['Role'],
        summary: 'L·∫•y danh s√°ch vai tr√≤',
        description:
          'L·∫•y danh s√°ch vai tr√≤ v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm',
          },
          {
            in: 'query',
            name: 'searchFields',
            schema: { type: 'string' },
            description: 'C√°c tr∆∞·ªùng t√¨m ki·∫øm, c√°ch nhau b·ªüi d·∫•u ph·∫©y (m·∫∑c ƒë·ªãnh: name,description)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"name","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"ACTIVE"})',
          },
          {
            in: 'query',
            name: 'returnAll',
            schema: { type: 'boolean' },
            description: 'Tr·∫£ v·ªÅ t·∫•t c·∫£ d·ªØ li·ªáu (b·ªè qua ph√¢n trang)',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch vai tr√≤',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          description: { type: 'string', nullable: true },
                          permissions: {
                            type: 'array',
                            items: {
                              type: 'object',
                              properties: {
                                id: { type: 'string' },
                                code: { type: 'string' },
                                name: { type: 'string' },
                                description: { type: 'string', nullable: true },
                              },
                            },
                          },
                        },
                      },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Role'],
        summary: 'T·∫°o vai tr√≤ m·ªõi',
        description: 'T·∫°o m·ªôt vai tr√≤ m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n vai tr√≤' },
                  description: { type: 'string', description: 'M√¥ t·∫£ vai tr√≤', nullable: true },
                  permissionIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Danh s√°ch ID c·ªßa c√°c quy·ªÅn',
                  },
                },
                required: ['name'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'T·∫°o vai tr√≤ th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        permissions: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              code: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'T√™n vai tr√≤ ƒë√£ t·ªìn t·∫°i ho·∫∑c quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/roles/{id}': {
      get: {
        tags: ['Role'],
        summary: 'L·∫•y chi ti·∫øt vai tr√≤',
        description: 'L·∫•y chi ti·∫øt m·ªôt vai tr√≤ theo ID (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt vai tr√≤',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        permissions: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              code: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Role'],
        summary: 'C·∫≠p nh·∫≠t vai tr√≤',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin vai tr√≤ (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n vai tr√≤' },
                  description: { type: 'string', description: 'M√¥ t·∫£ vai tr√≤', nullable: true },
                  permissionIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Danh s√°ch ID c·ªßa c√°c quy·ªÅn',
                  },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        permissions: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              code: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'T√™n vai tr√≤ ƒë√£ t·ªìn t·∫°i ho·∫∑c quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Role'],
        summary: 'X√≥a vai tr√≤',
        description:
          'X√≥a m·ªôt vai tr√≤ (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE, kh√¥ng th·ªÉ x√≥a n·∫øu vai tr√≤ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a vai tr√≤ th√†nh c√¥ng',
          },
          '400': {
            description: 'Vai tr√≤ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi d√πng',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/roles/{id}/permissions': {
      put: {
        tags: ['Role'],
        summary: 'C·∫≠p nh·∫≠t quy·ªÅn c·ªßa vai tr√≤',
        description: 'G√°n ho·∫∑c c·∫≠p nh·∫≠t danh s√°ch quy·ªÅn cho vai tr√≤ (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  permissionIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Danh s√°ch ID c·ªßa c√°c quy·ªÅn',
                  },
                },
                required: ['permissionIds'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t quy·ªÅn th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        permissions: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              code: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Permission
    '/permissions': {
      get: {
        tags: ['Permission'],
        summary: 'L·∫•y danh s√°ch quy·ªÅn',
        description:
          'L·∫•y danh s√°ch quy·ªÅn v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm',
          },
          {
            in: 'query',
            name: 'searchFields',
            schema: { type: 'string' },
            description: 'C√°c tr∆∞·ªùng t√¨m ki·∫øm, c√°ch nhau b·ªüi d·∫•u ph·∫©y (m·∫∑c ƒë·ªãnh: code,name,description)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"name","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"ACTIVE"})',
          },
          {
            in: 'query',
            name: 'returnAll',
            schema: { type: 'boolean' },
            description: 'Tr·∫£ v·ªÅ t·∫•t c·∫£ d·ªØ li·ªáu (b·ªè qua ph√¢n trang)',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch quy·ªÅn',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          code: { type: 'string' },
                          name: { type: 'string' },
                          description: { type: 'string', nullable: true },
                          roles: {
                            type: 'array',
                            items: {
                              type: 'object',
                              properties: {
                                id: { type: 'string' },
                                name: { type: 'string' },
                                description: { type: 'string', nullable: true },
                              },
                            },
                          },
                        },
                      },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Permission'],
        summary: 'T·∫°o quy·ªÅn m·ªõi',
        description: 'T·∫°o m·ªôt quy·ªÅn m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  code: { type: 'string', description: 'M√£ quy·ªÅn' },
                  name: { type: 'string', description: 'T√™n quy·ªÅn' },
                  description: { type: 'string', description: 'M√¥ t·∫£ quy·ªÅn', nullable: true },
                },
                required: ['code', 'name'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'T·∫°o quy·ªÅn th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    permission: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        code: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'M√£ quy·ªÅn ƒë√£ t·ªìn t·∫°i',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/permissions/{id}': {
      get: {
        tags: ['Permission'],
        summary: 'L·∫•y chi ti·∫øt quy·ªÅn',
        description: 'L·∫•y chi ti·∫øt m·ªôt quy·ªÅn theo ID (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa quy·ªÅn',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt quy·ªÅn',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    permission: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        code: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        roles: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y quy·ªÅn',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Permission'],
        summary: 'C·∫≠p nh·∫≠t quy·ªÅn',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin quy·ªÅn (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa quy·ªÅn',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  code: { type: 'string', description: 'M√£ quy·ªÅn' },
                  name: { type: 'string', description: 'T√™n quy·ªÅn' },
                  description: { type: 'string', description: 'M√¥ t·∫£ quy·ªÅn', nullable: true },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t quy·ªÅn th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    permission: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        code: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'M√£ quy·ªÅn ƒë√£ t·ªìn t·∫°i',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y quy·ªÅn',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Permission'],
        summary: 'X√≥a quy·ªÅn',
        description:
          'X√≥a m·ªôt quy·ªÅn (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE, kh√¥ng th·ªÉ x√≥a n·∫øu quy·ªÅn ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa quy·ªÅn',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a quy·ªÅn th√†nh c√¥ng',
          },
          '400': {
            description: 'Quy·ªÅn ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi vai tr√≤',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y quy·ªÅn',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Post
    '/posts': {
      get: {
        tags: ['Post'],
        summary: 'L·∫•y danh s√°ch b√†i vi·∫øt',
        description: 'L·∫•y danh s√°ch b√†i vi·∫øt v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc',
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1, default: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'limit',
            schema: { type: 'integer', minimum: 1, default: 10 },
            description: 'S·ªë b√†i vi·∫øt tr√™n m·ªói trang',
          },
          {
            in: 'query',
            name: 'categoryId',
            schema: { type: 'string' },
            description: 'ID c·ªßa danh m·ª•c',
          },
          {
            in: 'query',
            name: 'tagId',
            schema: { type: 'string' },
            description: 'ID c·ªßa th·∫ª',
          },
          {
            in: 'query',
            name: 'status',
            schema: { type: 'string', enum: ['DRAFT', 'PUBLISHED', 'SCHEDULED'] },
            description: 'Tr·∫°ng th√°i b√†i vi·∫øt',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm trong ti√™u ƒë·ªÅ, n·ªôi dung ho·∫∑c t√≥m t·∫Øt',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch b√†i vi·∫øt',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    posts: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          title: { type: 'string' },
                          slug: { type: 'string' },
                          content: { type: 'string' },
                          excerpt: { type: 'string', nullable: true },
                          featuredImage: { type: 'string', nullable: true },
                          author: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              name: { type: 'string' },
                            },
                          },
                          category: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              name: { type: 'string' },
                              slug: { type: 'string' },
                            },
                            nullable: true,
                          },
                          postTags: {
                            type: 'array',
                            items: {
                              type: 'object',
                              properties: {
                                tag: {
                                  type: 'object',
                                  properties: {
                                    id: { type: 'string' },
                                    name: { type: 'string' },
                                    slug: { type: 'string' },
                                  },
                                },
                              },
                            },
                          },
                          status: { type: 'string', enum: ['DRAFT', 'PUBLISHED', 'SCHEDULED'] },
                          createdAt: { type: 'string', format: 'date-time' },
                        },
                      },
                    },
                    pagination: {
                      type: 'object',
                      properties: {
                        currentPage: { type: 'number' },
                        totalPages: { type: 'number' },
                        totalPosts: { type: 'number' },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Post'],
        summary: 'T·∫°o b√†i vi·∫øt m·ªõi',
        description: 'T·∫°o m·ªôt b√†i vi·∫øt m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN ho·∫∑c CONTENT_MANAGER)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  title: { type: 'string', description: 'Ti√™u ƒë·ªÅ b√†i vi·∫øt' },
                  content: { type: 'string', description: 'N·ªôi dung b√†i vi·∫øt' },
                  excerpt: { type: 'string', description: 'T√≥m t·∫Øt b√†i vi·∫øt', nullable: true },
                  featuredImage: { type: 'string', format: 'binary', description: '·∫¢nh n·ªïi b·∫≠t', nullable: true },
                  categoryId: { type: 'string', description: 'ID c·ªßa danh m·ª•c', nullable: true },
                  tagIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Danh s√°ch ID c·ªßa c√°c th·∫ª',
                  },
                  metaTitle: { type: 'string', description: 'Ti√™u ƒë·ªÅ SEO', nullable: true },
                  metaDescription: { type: 'string', description: 'M√¥ t·∫£ SEO', nullable: true },
                  metaKeywords: { type: 'string', description: 'T·ª´ kh√≥a SEO', nullable: true },
                  status: {
                    type: 'string',
                    enum: ['DRAFT', 'PUBLISHED', 'SCHEDULED'],
                    description: 'Tr·∫°ng th√°i b√†i vi·∫øt',
                    nullable: true,
                  },
                  scheduledAt: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Th·ªùi gian l√™n l·ªãch xu·∫•t b·∫£n',
                    nullable: true,
                  },
                },
                required: ['title', 'content'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'T·∫°o b√†i vi·∫øt th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    post: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        title: { type: 'string' },
                        slug: { type: 'string' },
                        content: { type: 'string' },
                        excerpt: { type: 'string', nullable: true },
                        featuredImage: { type: 'string', nullable: true },
                        authorId: { type: 'string' },
                        category: {
                          type: 'object',
                          properties: {
                            id: { type: 'string' },
                            name: { type: 'string' },
                            slug: { type: 'string' },
                          },
                          nullable: true,
                        },
                        postTags: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              tag: {
                                type: 'object',
                                properties: {
                                  id: { type: 'string' },
                                  name: { type: 'string' },
                                  slug: { type: 'string' },
                                },
                              },
                            },
                          },
                        },
                        metaTitle: { type: 'string', nullable: true },
                        metaDescription: { type: 'string', nullable: true },
                        metaKeywords: { type: 'string', nullable: true },
                        status: { type: 'string', enum: ['DRAFT', 'PUBLISHED', 'SCHEDULED'] },
                        scheduledAt: { type: 'string', format: 'date-time', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/posts/{slugOrId}': {
      get: {
        tags: ['Post'],
        summary: 'L·∫•y chi ti·∫øt b√†i vi·∫øt',
        description: 'L·∫•y chi ti·∫øt b√†i vi·∫øt theo slug ho·∫∑c ID',
        parameters: [
          {
            name: 'slugOrId',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'Slug ho·∫∑c ID c·ªßa b√†i vi·∫øt',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt b√†i vi·∫øt',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    post: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        title: { type: 'string' },
                        slug: { type: 'string' },
                        content: { type: 'string' },
                        excerpt: { type: 'string', nullable: true },
                        featuredImage: { type: 'string', nullable: true },
                        author: {
                          type: 'object',
                          properties: {
                            id: { type: 'string' },
                            name: { type: 'string' },
                            avatar: { type: 'string', nullable: true },
                          },
                        },
                        category: {
                          type: 'object',
                          properties: {
                            id: { type: 'string' },
                            name: { type: 'string' },
                            slug: { type: 'string' },
                          },
                          nullable: true,
                        },
                        postTags: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              tag: {
                                type: 'object',
                                properties: {
                                  id: { type: 'string' },
                                  name: { type: 'string' },
                                  slug: { type: 'string' },
                                },
                              },
                            },
                          },
                        },
                        metaTitle: { type: 'string', nullable: true },
                        metaDescription: { type: 'string', nullable: true },
                        metaKeywords: { type: 'string', nullable: true },
                        status: { type: 'string', enum: ['DRAFT', 'PUBLISHED', 'SCHEDULED'] },
                        scheduledAt: { type: 'string', format: 'date-time', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Post'],
        summary: 'C·∫≠p nh·∫≠t b√†i vi·∫øt',
        description: 'C·∫≠p nh·∫≠t b√†i vi·∫øt (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN ho·∫∑c CONTENT_MANAGER)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'slugOrId',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'Slug ho·∫∑c ID c·ªßa b√†i vi·∫øt',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  title: { type: 'string', description: 'Ti√™u ƒë·ªÅ b√†i vi·∫øt' },
                  content: { type: 'string', description: 'N·ªôi dung b√†i vi·∫øt' },
                  excerpt: { type: 'string', description: 'T√≥m t·∫Øt b√†i vi·∫øt', nullable: true },
                  featuredImage: { type: 'string', format: 'binary', description: '·∫¢nh n·ªïi b·∫≠t', nullable: true },
                  categoryId: { type: 'string', description: 'ID c·ªßa danh m·ª•c', nullable: true },
                  tagIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Danh s√°ch ID c·ªßa c√°c th·∫ª',
                  },
                  metaTitle: { type: 'string', description: 'Ti√™u ƒë·ªÅ SEO', nullable: true },
                  metaDescription: { type: 'string', description: 'M√¥ t·∫£ SEO', nullable: true },
                  metaKeywords: { type: 'string', description: 'T·ª´ kh√≥a SEO', nullable: true },
                  status: {
                    type: 'string',
                    enum: ['DRAFT', 'PUBLISHED', 'SCHEDULED'],
                    description: 'Tr·∫°ng th√°i b√†i vi·∫øt',
                    nullable: true,
                  },
                  scheduledAt: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Th·ªùi gian l√™n l·ªãch xu·∫•t b·∫£n',
                    nullable: true,
                  },
                  changeReason: { type: 'string', description: 'L√Ω do thay ƒë·ªïi', nullable: true },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    post: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        title: { type: 'string' },
                        slug: { type: 'string' },
                        content: { type: 'string' },
                        excerpt: { type: 'string', nullable: true },
                        featuredImage: { type: 'string', nullable: true },
                        authorId: { type: 'string' },
                        category: {
                          type: 'object',
                          properties: {
                            id: { type: 'string' },
                            name: { type: 'string' },
                            slug: { type: 'string' },
                          },
                          nullable: true,
                        },
                        postTags: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              tag: {
                                type: 'object',
                                properties: {
                                  id: { type: 'string' },
                                  name: { type: 'string' },
                                  slug: { type: 'string' },
                                },
                              },
                            },
                          },
                        },
                        metaTitle: { type: 'string', nullable: true },
                        metaDescription: { type: 'string', nullable: true },
                        metaKeywords: { type: 'string', nullable: true },
                        status: { type: 'string', enum: ['DRAFT', 'PUBLISHED', 'SCHEDULED'] },
                        scheduledAt: { type: 'string', format: 'date-time', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Post'],
        summary: 'X√≥a m·ªÅm b√†i vi·∫øt',
        description:
          'X√≥a m·ªÅm b√†i vi·∫øt b·∫±ng c√°ch ƒë√°nh d·∫•u isDeleted (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN ho·∫∑c CONTENT_MANAGER)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'slugOrId',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'Slug ho·∫∑c ID c·ªßa b√†i vi·∫øt',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a m·ªÅm b√†i vi·∫øt th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    post: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        isDeleted: { type: 'boolean' },
                        deletedAt: { type: 'string', format: 'date-time', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/posts/{id}/history': {
      get: {
        tags: ['Post'],
        summary: 'L·∫•y l·ªãch s·ª≠ ch·ªânh s·ª≠a b√†i vi·∫øt',
        description: 'L·∫•y l·ªãch s·ª≠ ch·ªânh s·ª≠a c·ªßa b√†i vi·∫øt (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN ho·∫∑c CONTENT_MANAGER)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa b√†i vi·∫øt',
          },
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1, default: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'limit',
            schema: { type: 'integer', minimum: 1, default: 10 },
            description: 'S·ªë b·∫£n ghi tr√™n m·ªói trang',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'L·ªãch s·ª≠ ch·ªânh s·ª≠a b√†i vi·∫øt',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    histories: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          postId: { type: 'string' },
                          changedFields: {
                            type: 'object',
                            additionalProperties: {
                              type: 'object',
                              properties: {
                                from: { type: 'string', nullable: true },
                                to: { type: 'string', nullable: true },
                              },
                            },
                          },
                          changedBy: { type: 'string' },
                          changeReason: { type: 'string' },
                          createdAt: { type: 'string', format: 'date-time' },
                          post: {
                            type: 'object',
                            properties: {
                              title: { type: 'string' },
                            },
                          },
                        },
                      },
                    },
                    pagination: {
                      type: 'object',
                      properties: {
                        currentPage: { type: 'number' },
                        totalPages: { type: 'number' },
                        totalHistoryEntries: { type: 'number' },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Category
    '/categories': {
      get: {
        tags: ['Category'],
        summary: 'L·∫•y danh s√°ch danh m·ª•c',
        description: 'L·∫•y danh s√°ch danh m·ª•c v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc',
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1, default: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'limit',
            schema: { type: 'integer', minimum: 1, default: 10 },
            description: 'S·ªë danh m·ª•c tr√™n m·ªói trang',
          },
          {
            in: 'query',
            name: 'status',
            schema: { type: 'string', enum: ['ACTIVE', 'INACTIVE'] },
            description: 'Tr·∫°ng th√°i danh m·ª•c',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm trong t√™n ho·∫∑c m√¥ t·∫£',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch danh m·ª•c',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    categories: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          slug: { type: 'string' },
                          description: { type: 'string', nullable: true },
                          status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], nullable: true },
                          createdAt: { type: 'string', format: 'date-time' },
                        },
                      },
                    },
                    pagination: {
                      type: 'object',
                      properties: {
                        currentPage: { type: 'number' },
                        totalPages: { type: 'number' },
                        totalCategories: { type: 'number' },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Category'],
        summary: 'T·∫°o danh m·ª•c m·ªõi',
        description: 'T·∫°o m·ªôt danh m·ª•c m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN ho·∫∑c CONTENT_MANAGER)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n danh m·ª•c' },
                  description: { type: 'string', description: 'M√¥ t·∫£ danh m·ª•c', nullable: true },
                },
                required: ['name'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'T·∫°o danh m·ª•c th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    category: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        slug: { type: 'string' },
                        description: { type: 'string', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'T√™n danh m·ª•c kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/categories/{slugOrId}': {
      get: {
        tags: ['Category'],
        summary: 'L·∫•y chi ti·∫øt danh m·ª•c',
        description: 'L·∫•y chi ti·∫øt danh m·ª•c theo slug ho·∫∑c ID',
        parameters: [
          {
            name: 'slugOrId',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'Slug ho·∫∑c ID c·ªßa danh m·ª•c',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt danh m·ª•c',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    category: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        slug: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], nullable: true },
                        posts: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              title: { type: 'string' },
                              slug: { type: 'string' },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Category'],
        summary: 'C·∫≠p nh·∫≠t danh m·ª•c',
        description: 'C·∫≠p nh·∫≠t danh m·ª•c (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN ho·∫∑c CONTENT_MANAGER)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'slugOrId',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'Slug ho·∫∑c ID c·ªßa danh m·ª•c',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n danh m·ª•c' },
                  description: { type: 'string', description: 'M√¥ t·∫£ danh m·ª•c', nullable: true },
                  status: {
                    type: 'string',
                    enum: ['ACTIVE', 'INACTIVE'],
                    description: 'Tr·∫°ng th√°i danh m·ª•c',
                    nullable: true,
                  },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    category: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        slug: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Category'],
        summary: 'X√≥a m·ªÅm danh m·ª•c',
        description:
          'X√≥a m·ªÅm danh m·ª•c n·∫øu kh√¥ng c√≥ b√†i vi·∫øt li√™n k·∫øt (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN ho·∫∑c CONTENT_MANAGER)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'slugOrId',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'Slug ho·∫∑c ID c·ªßa danh m·ª•c',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a m·ªÅm danh m·ª•c th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    category: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        isDeleted: { type: 'boolean' },
                        deletedAt: { type: 'string', format: 'date-time', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Danh m·ª•c c√≥ b√†i vi·∫øt li√™n k·∫øt',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Tag
    '/tags': {
      get: {
        tags: ['Tag'],
        summary: 'L·∫•y danh s√°ch th·∫ª',
        description: 'L·∫•y danh s√°ch th·∫ª v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc',
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1, default: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'limit',
            schema: { type: 'integer', minimum: 1, default: 10 },
            description: 'S·ªë th·∫ª tr√™n m·ªói trang',
          },
          {
            in: 'query',
            name: 'status',
            schema: { type: 'string', enum: ['ACTIVE', 'INACTIVE'] },
            description: 'Tr·∫°ng th√°i th·∫ª',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm trong t√™n th·∫ª',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch th·∫ª',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    tags: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          slug: { type: 'string' },
                          status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], nullable: true },
                          postCount: { type: 'number' },
                          createdAt: { type: 'string', format: 'date-time' },
                        },
                      },
                    },
                    pagination: {
                      type: 'object',
                      properties: {
                        currentPage: { type: 'number' },
                        totalPages: { type: 'number' },
                        totalTags: { type: 'number' },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Tag'],
        summary: 'T·∫°o th·∫ª m·ªõi',
        description: 'T·∫°o m·ªôt th·∫ª m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN ho·∫∑c CONTENT_MANAGER)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n th·∫ª' },
                },
                required: ['name'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'T·∫°o th·∫ª th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    tag: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        slug: { type: 'string' },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'T√™n th·∫ª kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/tags/{slugOrId}': {
      get: {
        tags: ['Tag'],
        summary: 'L·∫•y chi ti·∫øt th·∫ª',
        description: 'L·∫•y chi ti·∫øt th·∫ª theo slug ho·∫∑c ID',
        parameters: [
          {
            name: 'slugOrId',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'Slug ho·∫∑c ID c·ªßa th·∫ª',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt th·∫ª',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    tag: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        slug: { type: 'string' },
                        status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], nullable: true },
                        posts: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              title: { type: 'string' },
                              slug: { type: 'string' },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y th·∫ª',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Tag'],
        summary: 'C·∫≠p nh·∫≠t th·∫ª',
        description: 'C·∫≠p nh·∫≠t th·∫ª (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN ho·∫∑c CONTENT_MANAGER)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'slugOrId',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'Slug ho·∫∑c ID c·ªßa th·∫ª',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n th·∫ª' },
                  status: {
                    type: 'string',
                    enum: ['ACTIVE', 'INACTIVE'],
                    description: 'Tr·∫°ng th√°i th·∫ª',
                    nullable: true,
                  },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t th·∫ª th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    tag: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        slug: { type: 'string' },
                        status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y th·∫ª',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Route
    '/routes': {
      get: {
        tags: ['Route'],
        summary: 'L·∫•y danh s√°ch tuy·∫øn ƒë∆∞·ªùng',
        description: 'L·∫•y danh s√°ch tuy·∫øn ƒë∆∞·ªùng v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm (code, name)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"name","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"ACTIVE"})',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch tuy·∫øn ƒë∆∞·ªùng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: { $ref: '#/components/schemas/Route' },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Route'],
        summary: 'T·∫°o tuy·∫øn ƒë∆∞·ªùng m·ªõi',
        description: 'T·∫°o m·ªôt tuy·∫øn ƒë∆∞·ªùng m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  code: { type: 'string', description: 'M√£ tuy·∫øn ƒë∆∞·ªùng' },
                  name: { type: 'string', description: 'T√™n tuy·∫øn ƒë∆∞·ªùng' },
                  direction: { type: 'string', description: 'H∆∞·ªõng tuy·∫øn ƒë∆∞·ªùng', nullable: true },
                  sourceProvinceId: { type: 'string', description: 'ID t·ªânh/th√†nh ph·ªë ƒë·∫ßu' },
                  destinationProvinceId: { type: 'string', description: 'ID t·ªânh/th√†nh ph·ªë cu·ªëi' },
                  distance: { type: 'number', description: 'Kho·∫£ng c√°ch' },
                  distanceUnit: { type: 'string', enum: ['KM', 'MILE'], description: 'ƒê∆°n v·ªã kho·∫£ng c√°ch' },
                  estimatedDuration: { type: 'integer', description: 'Th·ªùi gian d·ª± ki·∫øn (ph√∫t)' },
                  image: { type: 'string', format: 'binary', description: '·∫¢nh tuy·∫øn ƒë∆∞·ªùng', nullable: true },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], description: 'Tr·∫°ng th√°i' },
                },
                required: [
                  'code',
                  'name',
                  'sourceProvinceId',
                  'destinationProvinceId',
                  'distance',
                  'distanceUnit',
                  'estimatedDuration',
                  'status',
                ],
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'T·∫°o tuy·∫øn ƒë∆∞·ªùng th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Route' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/routes/{id}': {
      get: {
        tags: ['Route'],
        summary: 'L·∫•y chi ti·∫øt tuy·∫øn ƒë∆∞·ªùng',
        description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt tuy·∫øn ƒë∆∞·ªùng theo ID (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa tuy·∫øn ƒë∆∞·ªùng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt tuy·∫øn ƒë∆∞·ªùng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Route' },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Route'],
        summary: 'C·∫≠p nh·∫≠t tuy·∫øn ƒë∆∞·ªùng',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin tuy·∫øn ƒë∆∞·ªùng (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa tuy·∫øn ƒë∆∞·ªùng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  code: { type: 'string', description: 'M√£ tuy·∫øn ƒë∆∞·ªùng' },
                  name: { type: 'string', description: 'T√™n tuy·∫øn ƒë∆∞·ªùng' },
                  direction: { type: 'string', description: 'H∆∞·ªõng tuy·∫øn ƒë∆∞·ªùng', nullable: true },
                  sourceProvinceId: { type: 'string', description: 'ID t·ªânh/th√†nh ph·ªë ƒë·∫ßu' },
                  destinationProvinceId: { type: 'string', description: 'ID t·ªânh/th√†nh ph·ªë cu·ªëi' },
                  distance: { type: 'number', description: 'Kho·∫£ng c√°ch' },
                  distanceUnit: { type: 'string', enum: ['KM', 'MILE'], description: 'ƒê∆°n v·ªã kho·∫£ng c√°ch' },
                  estimatedDuration: { type: 'integer', description: 'Th·ªùi gian d·ª± ki·∫øn (ph√∫t)' },
                  image: { type: 'string', format: 'binary', description: '·∫¢nh tuy·∫øn ƒë∆∞·ªùng', nullable: true },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], description: 'Tr·∫°ng th√°i' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t tuy·∫øn ƒë∆∞·ªùng th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Route' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Route'],
        summary: 'X√≥a m·ªÅm tuy·∫øn ƒë∆∞·ªùng',
        description: 'X√≥a m·ªÅm tuy·∫øn ƒë∆∞·ªùng b·∫±ng c√°ch ƒë√°nh d·∫•u isDeleted (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa tuy·∫øn ƒë∆∞·ªùng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a m·ªÅm tuy·∫øn ƒë∆∞·ªùng th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    id: { type: 'string' },
                    isDeleted: { type: 'boolean' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/routes/{id}/image': {
      post: {
        tags: ['Route'],
        summary: 'Upload ·∫£nh tuy·∫øn ƒë∆∞·ªùng',
        description: 'Upload ·∫£nh cho tuy·∫øn ƒë∆∞·ªùng (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa tuy·∫øn ƒë∆∞·ªùng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  image: { type: 'string', format: 'binary', description: '·∫¢nh tuy·∫øn ƒë∆∞·ªùng' },
                },
                required: ['image'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Upload ·∫£nh th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    imageUrl: { type: 'string' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Kh√¥ng c√≥ file ƒë∆∞·ª£c upload',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Bus stop
    '/bus-stops': {
      get: {
        tags: ['Bus Stop'],
        summary: 'L·∫•y danh s√°ch ƒëi·ªÉm d·ª´ng',
        description: 'L·∫•y danh s√°ch ƒëi·ªÉm d·ª´ng v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm (name)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"name","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"ACTIVE"})',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch ƒëi·ªÉm d·ª´ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: { $ref: '#/components/schemas/BusStop' },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Bus Stop'],
        summary: 'T·∫°o ƒëi·ªÉm d·ª´ng m·ªõi',
        description: 'T·∫°o m·ªôt ƒëi·ªÉm d·ª´ng m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n ƒëi·ªÉm d·ª´ng' },
                  wardId: { type: 'string', description: 'ID ph∆∞·ªùng/x√£' },
                  latitude: { type: 'number', description: 'Vƒ© ƒë·ªô', nullable: true },
                  longitude: { type: 'number', description: 'Kinh ƒë·ªô', nullable: true },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], description: 'Tr·∫°ng th√°i' },
                },
                required: ['name', 'wardId', 'status'],
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'T·∫°o ƒëi·ªÉm d·ª´ng th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/BusStop' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/bus-stops/{id}': {
      get: {
        tags: ['Bus Stop'],
        summary: 'L·∫•y chi ti·∫øt ƒëi·ªÉm d·ª´ng',
        description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ƒëi·ªÉm d·ª´ng theo ID (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ƒëi·ªÉm d·ª´ng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt ƒëi·ªÉm d·ª´ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/BusStop' },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm d·ª´ng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Bus Stop'],
        summary: 'C·∫≠p nh·∫≠t ƒëi·ªÉm d·ª´ng',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin ƒëi·ªÉm d·ª´ng (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ƒëi·ªÉm d·ª´ng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n ƒëi·ªÉm d·ª´ng' },
                  wardId: { type: 'string', description: 'ID ph∆∞·ªùng/x√£' },
                  latitude: { type: 'number', description: 'Vƒ© ƒë·ªô', nullable: true },
                  longitude: { type: 'number', description: 'Kinh ƒë·ªô', nullable: true },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], description: 'Tr·∫°ng th√°i' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t ƒëi·ªÉm d·ª´ng th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/BusStop' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm d·ª´ng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Bus Stop'],
        summary: 'X√≥a m·ªÅm ƒëi·ªÉm d·ª´ng',
        description: 'X√≥a m·ªÅm ƒëi·ªÉm d·ª´ng b·∫±ng c√°ch ƒë√°nh d·∫•u isDeleted (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ƒëi·ªÉm d·ª´ng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a m·ªÅm ƒëi·ªÉm d·ª´ng th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    id: { type: 'string' },
                    isDeleted: { type: 'boolean' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm d·ª´ng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Route stop
    '/route-stops': {
      get: {
        tags: ['Route Stop'],
        summary: 'L·∫•y danh s√°ch ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
        description: 'L·∫•y danh s√°ch ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"stopOrder","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"ACTIVE"})',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: { $ref: '#/components/schemas/RouteStop' },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Route Stop'],
        summary: 'T·∫°o ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn m·ªõi',
        description: 'T·∫°o m·ªôt ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  routeId: { type: 'string', description: 'ID tuy·∫øn ƒë∆∞·ªùng' },
                  busStopId: { type: 'string', description: 'ID ƒëi·ªÉm d·ª´ng' },
                  stopOrder: { type: 'integer', description: 'Th·ª© t·ª± d·ª´ng' },
                  estimatedArrivalTime: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Th·ªùi gian ƒë·∫øn d·ª± ki·∫øn',
                    nullable: true,
                  },
                  estimatedDepartureTime: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Th·ªùi gian r·ªùi d·ª± ki·∫øn',
                    nullable: true,
                  },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], description: 'Tr·∫°ng th√°i' },
                },
                required: ['routeId', 'busStopId', 'stopOrder', 'status'],
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'T·∫°o ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/RouteStop' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/route-stops/{id}': {
      get: {
        tags: ['Route Stop'],
        summary: 'L·∫•y chi ti·∫øt ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
        description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn theo ID (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/RouteStop' },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Route Stop'],
        summary: 'C·∫≠p nh·∫≠t ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  routeId: { type: 'string', description: 'ID tuy·∫øn ƒë∆∞·ªùng' },
                  busStopId: { type: 'string', description: 'ID ƒëi·ªÉm d·ª´ng' },
                  stopOrder: { type: 'integer', description: 'Th·ª© t·ª± d·ª´ng' },
                  estimatedArrivalTime: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Th·ªùi gian ƒë·∫øn d·ª± ki·∫øn',
                    nullable: true,
                  },
                  estimatedDepartureTime: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Th·ªùi gian r·ªùi d·ª± ki·∫øn',
                    nullable: true,
                  },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], description: 'Tr·∫°ng th√°i' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/RouteStop' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Route Stop'],
        summary: 'X√≥a m·ªÅm ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
        description: 'X√≥a m·ªÅm ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn b·∫±ng c√°ch ƒë√°nh d·∫•u isDeleted (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a m·ªÅm ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    id: { type: 'string' },
                    isDeleted: { type: 'boolean' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm d·ª´ng tr√™n tuy·∫øn',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Vehicle type
    '/vehicle-types': {
      get: {
        tags: ['Vehicle Type'],
        summary: 'L·∫•y danh s√°ch lo·∫°i ph∆∞∆°ng ti·ªán',
        description: 'L·∫•y danh s√°ch lo·∫°i ph∆∞∆°ng ti·ªán v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm (name)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"name","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"ACTIVE"})',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch lo·∫°i ph∆∞∆°ng ti·ªán',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: { $ref: '#/components/schemas/VehicleType' },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Vehicle Type'],
        summary: 'T·∫°o lo·∫°i ph∆∞∆°ng ti·ªán m·ªõi',
        description: 'T·∫°o m·ªôt lo·∫°i ph∆∞∆°ng ti·ªán m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n lo·∫°i ph∆∞∆°ng ti·ªán' },
                  description: { type: 'string', description: 'M√¥ t·∫£', nullable: true },
                  seatConfiguration: { type: 'object', description: 'C·∫•u h√¨nh gh·∫ø' },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], description: 'Tr·∫°ng th√°i' },
                },
                required: ['name', 'seatConfiguration', 'status'],
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'T·∫°o lo·∫°i ph∆∞∆°ng ti·ªán th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/VehicleType' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/vehicle-types/{id}': {
      get: {
        tags: ['Vehicle Type'],
        summary: 'L·∫•y chi ti·∫øt lo·∫°i ph∆∞∆°ng ti·ªán',
        description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt lo·∫°i ph∆∞∆°ng ti·ªán theo ID (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa lo·∫°i ph∆∞∆°ng ti·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt lo·∫°i ph∆∞∆°ng ti·ªán',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/VehicleType' },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y lo·∫°i ph∆∞∆°ng ti·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Vehicle Type'],
        summary: 'C·∫≠p nh·∫≠t lo·∫°i ph∆∞∆°ng ti·ªán',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin lo·∫°i ph∆∞∆°ng ti·ªán (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa lo·∫°i ph∆∞∆°ng ti·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n lo·∫°i ph∆∞∆°ng ti·ªán' },
                  description: { type: 'string', description: 'M√¥ t·∫£', nullable: true },
                  seatConfiguration: { type: 'object', description: 'C·∫•u h√¨nh gh·∫ø' },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'], description: 'Tr·∫°ng th√°i' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t lo·∫°i ph∆∞∆°ng ti·ªán th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/VehicleType' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y lo·∫°i ph∆∞∆°ng ti·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Vehicle Type'],
        summary: 'X√≥a m·ªÅm lo·∫°i ph∆∞∆°ng ti·ªán',
        description: 'X√≥a m·ªÅm lo·∫°i ph∆∞∆°ng ti·ªán b·∫±ng c√°ch ƒë√°nh d·∫•u isDeleted (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa lo·∫°i ph∆∞∆°ng ti·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a m·ªÅm lo·∫°i ph∆∞∆°ng ti·ªán th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    id: { type: 'string' },
                    isDeleted: { type: 'boolean' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y lo·∫°i ph∆∞∆°ng ti·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Vehicle
    '/vehicles': {
      get: {
        tags: ['Vehicle'],
        summary: 'L·∫•y danh s√°ch ph∆∞∆°ng ti·ªán',
        description: 'L·∫•y danh s√°ch ph∆∞∆°ng ti·ªán v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm (plateNumber, registrationCode)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"plateNumber","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"ACTIVE"})',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch ph∆∞∆°ng ti·ªán',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: { $ref: '#/components/schemas/Vehicle' },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Vehicle'],
        summary: 'T·∫°o ph∆∞∆°ng ti·ªán m·ªõi',
        description: 'T·∫°o m·ªôt ph∆∞∆°ng ti·ªán m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  plateNumber: { type: 'string', description: 'Bi·ªÉn s·ªë xe' },
                  registrationCode: { type: 'string', description: 'M√£ ƒëƒÉng k√Ω' },
                  vehicleTypeId: { type: 'string', description: 'ID lo·∫°i ph∆∞∆°ng ti·ªán' },
                  driverId: { type: 'string', description: 'ID t√†i x·∫ø', nullable: true },
                  registrationExpiryDate: { type: 'string', format: 'date-time', description: 'Ng√†y h·∫øt h·∫°n ƒëƒÉng k√Ω' },
                  image: { type: 'string', format: 'binary', description: '·∫¢nh ph∆∞∆°ng ti·ªán', nullable: true },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE', 'MAINTENANCE'], description: 'Tr·∫°ng th√°i' },
                },
                required: ['plateNumber', 'registrationCode', 'vehicleTypeId', 'registrationExpiryDate', 'status'],
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'T·∫°o ph∆∞∆°ng ti·ªán th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Vehicle' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/vehicles/{id}': {
      get: {
        tags: ['Vehicle'],
        summary: 'L·∫•y chi ti·∫øt ph∆∞∆°ng ti·ªán',
        description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ph∆∞∆°ng ti·ªán theo ID (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ph∆∞∆°ng ti·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt ph∆∞∆°ng ti·ªán',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Vehicle' },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng ti·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Vehicle'],
        summary: 'C·∫≠p nh·∫≠t ph∆∞∆°ng ti·ªán',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin ph∆∞∆°ng ti·ªán (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ph∆∞∆°ng ti·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  plateNumber: { type: 'string', description: 'Bi·ªÉn s·ªë xe' },
                  registrationCode: { type: 'string', description: 'M√£ ƒëƒÉng k√Ω' },
                  vehicleTypeId: { type: 'string', description: 'ID lo·∫°i ph∆∞∆°ng ti·ªán' },
                  driverId: { type: 'string', description: 'ID t√†i x·∫ø', nullable: true },
                  registrationExpiryDate: { type: 'string', format: 'date-time', description: 'Ng√†y h·∫øt h·∫°n ƒëƒÉng k√Ω' },
                  image: { type: 'string', format: 'binary', description: '·∫¢nh ph∆∞∆°ng ti·ªán', nullable: true },
                  status: { type: 'string', enum: ['ACTIVE', 'INACTIVE', 'MAINTENANCE'], description: 'Tr·∫°ng th√°i' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t ph∆∞∆°ng ti·ªán th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Vehicle' },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng ti·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Vehicle'],
        summary: 'X√≥a m·ªÅm ph∆∞∆°ng ti·ªán',
        description: 'X√≥a m·ªÅm ph∆∞∆°ng ti·ªán b·∫±ng c√°ch ƒë√°nh d·∫•u isDeleted (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ph∆∞∆°ng ti·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a m·ªÅm ph∆∞∆°ng ti·ªán th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    id: { type: 'string' },
                    isDeleted: { type: 'boolean' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng ti·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/vehicles/{id}/image': {
      post: {
        tags: ['Vehicle'],
        summary: 'Upload ·∫£nh ph∆∞∆°ng ti·ªán',
        description: 'Upload ·∫£nh cho ph∆∞∆°ng ti·ªán (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ph√π h·ª£p)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ph∆∞∆°ng ti·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  image: { type: 'string', format: 'binary', description: '·∫¢nh ph∆∞∆°ng ti·ªán' },
                },
                required: ['image'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Upload ·∫£nh th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    imageUrl: { type: 'string' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Kh√¥ng c√≥ file ƒë∆∞·ª£c upload',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng ti·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Trip
    '/trips': {
      get: {
        tags: ['Trip'],
        summary: 'Get list of trips with filtering',
        description:
          'Retrieve a paginated list of trips with optional filters such as route, vehicle, date range, and status.',
        parameters: [
          {
            name: 'routeId',
            in: 'query',
            description: 'Filter by route ID',
            schema: { type: 'string' },
          },
          {
            name: 'vehicleId',
            in: 'query',
            description: 'Filter by vehicle ID',
            schema: { type: 'string' },
          },
          {
            name: 'startDate',
            in: 'query',
            description: 'Filter by start date (ISO format)',
            schema: { type: 'string', format: 'date-time' },
          },
          {
            name: 'endDate',
            in: 'query',
            description: 'Filter by end date (ISO format)',
            schema: { type: 'string', format: 'date-time' },
          },
          {
            name: 'status',
            in: 'query',
            description: 'Filter by trip status',
            schema: {
              type: 'string',
              enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'],
            },
          },
          {
            name: 'page',
            in: 'query',
            description: 'Page number for pagination',
            schema: { type: 'integer', default: 1 },
          },
          {
            name: 'pageSize',
            in: 'query',
            description: 'Number of items per page',
            schema: { type: 'integer', default: 10 },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'List of trips retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: {
                      type: 'array',
                      items: {
                        $ref: '#/components/schemas/TripWithDetails',
                      },
                    },
                    pagination: {
                      type: 'object',
                      properties: {
                        page: { type: 'integer' },
                        pageSize: { type: 'integer' },
                        totalCount: { type: 'integer' },
                        totalPages: { type: 'integer' },
                      },
                    },
                  },
                },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
      post: {
        tags: ['Trip'],
        summary: 'Create a new trip',
        description: 'Create a new trip with associated seats and optional image. Requires admin authentication.',
        security: [{ BearerAuth: [] }],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  routeId: { type: 'string', description: 'ID of the route' },
                  vehicleId: { type: 'string', description: 'ID of the vehicle' },
                  departureTime: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Departure time in ISO format',
                  },
                  arrivalTime: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Arrival time in ISO format',
                  },
                  basePrice: { type: 'number', description: 'Base price of the trip' },
                  specialPrice: {
                    type: 'number',
                    description: 'Special price (optional)',
                    nullable: true,
                  },
                  image: {
                    type: 'string',
                    format: 'binary',
                    description: 'Optional trip image',
                  },
                },
                required: ['routeId', 'vehicleId', 'departureTime', 'arrivalTime', 'basePrice'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Trip created successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: { $ref: '#/components/schemas/TripWithDetails' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Invalid input data',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '404': {
            description: 'Route or vehicle not found',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    '/trips/search': {
      get: {
        tags: ['Trip'],
        summary: 'Search trips by source and destination',
        description:
          'Search for trips based on source province, destination province, departure date, and optional return date or price range.',
        parameters: [
          {
            name: 'sourceProvinceId',
            in: 'query',
            description: 'ID of the source province',
            schema: { type: 'string' },
          },
          {
            name: 'destinationProvinceId',
            in: 'query',
            description: 'ID of the destination province',
            schema: { type: 'string' },
          },
          {
            name: 'departureDate',
            in: 'query',
            description: 'Departure date (ISO format)',
            schema: { type: 'string', format: 'date-time' },
          },
          {
            name: 'returnDate',
            in: 'query',
            description: 'Return date for round-trip search (optional, ISO format)',
            schema: { type: 'string', format: 'date-time' },
          },
          {
            name: 'minPrice',
            in: 'query',
            description: 'Minimum price filter',
            schema: { type: 'number' },
          },
          {
            name: 'maxPrice',
            in: 'query',
            description: 'Maximum price filter',
            schema: { type: 'number' },
          },
          {
            name: 'page',
            in: 'query',
            description: 'Page number for pagination',
            schema: { type: 'integer', default: 1 },
          },
          {
            name: 'pageSize',
            in: 'query',
            description: 'Number of items per page',
            schema: { type: 'integer', default: 10 },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'Search results retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    outboundTrips: {
                      type: 'object',
                      properties: {
                        data: {
                          type: 'array',
                          items: { $ref: '#/components/schemas/TripWithDetails' },
                        },
                        pagination: {
                          type: 'object',
                          properties: {
                            page: { type: 'integer' },
                            pageSize: { type: 'integer' },
                            totalCount: { type: 'integer' },
                            totalPages: { type: 'integer' },
                          },
                        },
                      },
                    },
                    returnTrips: {
                      type: 'object',
                      nullable: true,
                      properties: {
                        data: {
                          type: 'array',
                          items: { $ref: '#/components/schemas/TripWithDetails' },
                        },
                        pagination: {
                          type: 'object',
                          properties: {
                            page: { type: 'integer' },
                            pageSize: { type: 'integer' },
                            totalCount: { type: 'integer' },
                            totalPages: { type: 'integer' },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    '/trips/details/{id}': {
      get: {
        tags: ['Trip'],
        summary: 'Get trip details',
        description:
          'Retrieve detailed information about a specific trip, including route, vehicle, seats, and driver info.',
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'ID of the trip',
            schema: { type: 'string' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'Trip details retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: { $ref: '#/components/schemas/TripWithDetails' },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Trip not found',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
      put: {
        tags: ['Trip'],
        summary: 'Update a trip',
        description:
          'Update trip details such as route, vehicle, times, prices, or status. Requires admin authentication.',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'ID of the trip',
            schema: { type: 'string' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  routeId: { type: 'string', description: 'ID of the route' },
                  vehicleId: { type: 'string', description: 'ID of the vehicle' },
                  departureTime: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Departure time in ISO format',
                  },
                  arrivalTime: {
                    type: 'string',
                    format: 'date-time',
                    description: 'Arrival time in ISO format',
                  },
                  basePrice: { type: 'number', description: 'Base price of the trip' },
                  specialPrice: {
                    type: 'number',
                    description: 'Special price (optional)',
                    nullable: true,
                  },
                  status: {
                    type: 'string',
                    enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'],
                    description: 'Trip status',
                  },
                  changeReason: { type: 'string', description: 'Reason for the update' },
                  image: {
                    type: 'string',
                    format: 'binary',
                    description: 'Optional trip image',
                  },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Trip updated successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: { $ref: '#/components/schemas/TripWithDetails' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Invalid input data or status transition',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '404': {
            description: 'Trip, route, or vehicle not found',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
      delete: {
        tags: ['Trip'],
        summary: 'Soft delete a trip',
        description: 'Soft delete a trip by marking it as deleted and cancelling it. Requires admin authentication.',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'ID of the trip',
            schema: { type: 'string' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  reason: { type: 'string', description: 'Reason for deletion' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Trip deleted successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Trip has active bookings',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '404': {
            description: 'Trip not found',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    '/trips/{id}/restore': {
      post: {
        tags: ['Trip'],
        summary: 'Restore a deleted trip',
        description: 'Restore a soft-deleted trip and set its status to SCHEDULED. Requires admin authentication.',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'ID of the trip',
            schema: { type: 'string' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'Trip restored successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Trip is not deleted',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '404': {
            description: 'Trip not found',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    '/trips/{id}/seats': {
      get: {
        tags: ['Trip'],
        summary: 'Get available seats for a trip',
        description: 'Retrieve the seat configuration and availability for a specific trip. Requires authentication.',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'ID of the trip',
            schema: { type: 'string' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'Seats retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: {
                      type: 'object',
                      properties: {
                        trip: {
                          type: 'object',
                          properties: {
                            id: { type: 'string' },
                            departureTime: { type: 'string', format: 'date-time' },
                            arrivalTime: { type: 'string', format: 'date-time' },
                            basePrice: { type: 'number' },
                            specialPrice: { type: 'number', nullable: true },
                            status: {
                              type: 'string',
                              enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'],
                            },
                          },
                        },
                        seatConfiguration: { type: 'object' },
                        seats: {
                          type: 'array',
                          items: { $ref: '#/components/schemas/Seat' },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Trip not found',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    '/trips/{id}/seats/availability': {
      get: {
        tags: ['Trip'],
        summary: 'Check seat availability for a trip',
        description: 'Check the availability of seats for a specific trip, including seat configuration and status.',
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'ID of the trip',
            schema: { type: 'string' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'Seat availability retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: {
                      type: 'object',
                      properties: {
                        tripId: { type: 'string' },
                        departureTime: { type: 'string', format: 'date-time' },
                        arrivalTime: { type: 'string', format: 'date-time' },
                        seatConfiguration: { type: 'object' },
                        seats: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              seatNumber: { type: 'string' },
                              seatType: { type: 'string', enum: ['STANDARD', 'PREMIUM', 'VIP'] },
                              status: {
                                type: 'string',
                                enum: ['AVAILABLE', 'BOOKED', 'RESERVED'],
                              },
                              isAvailable: { type: 'boolean' },
                            },
                          },
                        },
                        totalSeats: { type: 'integer' },
                        availableSeats: { type: 'integer' },
                      },
                    },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Trip not found',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    '/trips/{id}/seats/{seatId}': {
      put: {
        tags: ['Trip'],
        summary: 'Update seat status',
        description: 'Update the status of a specific seat for a trip. Requires admin authentication.',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'ID of the trip',
            schema: { type: 'string' },
          },
          {
            name: 'seatId',
            in: 'path',
            required: true,
            description: 'ID of the seat',
            schema: { type: 'string' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  status: {
                    type: 'string',
                    enum: ['AVAILABLE', 'BOOKED', 'RESERVED'],
                    description: 'New seat status',
                  },
                  reason: { type: 'string', description: 'Reason for status change' },
                },
                required: ['status'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Seat status updated successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: { $ref: '#/components/schemas/Seat' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Invalid status or seat is booked/reserved',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '404': {
            description: 'Trip or seat not found',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    '/trips/calendar-view': {
      get: {
        tags: ['Trip'],
        summary: 'Get trips by date range for calendar view',
        description:
          'Retrieve trips within a specified date range formatted as calendar events. Requires authentication.',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'startDate',
            in: 'query',
            required: true,
            description: 'Start date of the range (ISO format)',
            schema: { type: 'string', format: 'date-time' },
          },
          {
            name: 'endDate',
            in: 'query',
            required: true,
            description: 'End date of the range (ISO format)',
            schema: { type: 'string', format: 'date-time' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'Calendar events retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          title: { type: 'string' },
                          start: { type: 'string', format: 'date-time' },
                          end: { type: 'string', format: 'date-time' },
                          bookings: { type: 'integer' },
                          availableSeats: { type: 'integer' },
                          status: {
                            type: 'string',
                            enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'],
                          },
                          routeName: { type: 'string' },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Missing or invalid date range',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    '/trips/export/data': {
      get: {
        tags: ['Trip'],
        summary: 'Export trip data',
        description: 'Export trip data in JSON or CSV format with optional filters. Requires admin authentication.',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'startDate',
            in: 'query',
            description: 'Start date for filtering trips (ISO format)',
            schema: { type: 'string', format: 'date-time' },
          },
          {
            name: 'endDate',
            in: 'query',
            description: 'End date for filtering trips (ISO format)',
            schema: { type: 'string', format: 'date-time' },
          },
          {
            name: 'routeId',
            in: 'query',
            description: 'Filter by route ID',
            schema: { type: 'string' },
          },
          {
            name: 'format',
            in: 'query',
            description: 'Export format',
            schema: { type: 'string', enum: ['json', 'csv'], default: 'json' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'Trip data exported successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          route: { type: 'string' },
                          departureTime: { type: 'string', format: 'date-time' },
                          arrivalTime: { type: 'string', format: 'date-time' },
                          status: {
                            type: 'string',
                            enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'],
                          },
                          vehicle: { type: 'string' },
                          driver: { type: 'string' },
                          basePrice: { type: 'number' },
                          specialPrice: { type: 'number', nullable: true },
                          totalBookings: { type: 'integer' },
                          availableSeats: { type: 'integer' },
                          confirmedBookings: { type: 'integer' },
                          pendingBookings: { type: 'integer' },
                          totalRevenue: { type: 'number' },
                        },
                      },
                    },
                  },
                },
              },
              'text/csv': {
                schema: {
                  type: 'string',
                  description: 'CSV formatted data',
                },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    '/trips/{id}/history': {
      get: {
        tags: ['Trip'],
        summary: 'Get trip history',
        description: 'Retrieve the change history for a specific trip. Requires authentication.',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            description: 'ID of the trip',
            schema: { type: 'string' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Language for response messages',
            schema: { type: 'string', default: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'Trip history retrieved successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    message: { type: 'string' },
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          tripId: { type: 'string' },
                          changedFields: { type: 'object' },
                          changedBy: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              name: { type: 'string' },
                              email: { type: 'string', nullable: true },
                              avatarUrl: { type: 'string', nullable: true },
                            },
                          },
                          changeReason: { type: 'string' },
                          createdAt: { type: 'string', format: 'date-time' },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Trip not found',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
          '500': {
            description: 'Server error',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/Error' },
              },
            },
          },
        },
      },
    },
    // Booking endpoints
    '/bookings/calculate': {
      post: {
        tags: ['Booking'],
        summary: 'T√≠nh to√°n gi√° ƒë·∫∑t v√© v·ªõi m√£ gi·∫£m gi√°',
        description: 'T√≠nh to√°n chi ph√≠ ƒë·∫∑t v√© d·ª±a tr√™n chuy·∫øn ƒëi, s·ªë l∆∞·ª£ng gh·∫ø v√† m√£ gi·∫£m gi√° (n·∫øu c√≥)',
        security: [{ BearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  tripId: {
                    type: 'string',
                    description: 'ID c·ªßa chuy·∫øn ƒëi',
                    example: '507f1f77bcf86cd799439012',
                  },
                  seatCount: {
                    type: 'number',
                    description: 'S·ªë l∆∞·ª£ng gh·∫ø mu·ªën ƒë·∫∑t',
                    example: 2,
                  },
                  voucherCode: {
                    type: 'string',
                    description: 'M√£ gi·∫£m gi√° (t√πy ch·ªçn)',
                    example: 'SUMMER2025',
                  },
                },
                required: ['tripId', 'seatCount'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'T√≠nh to√°n gi√° th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.calculated' },
                    data: {
                      type: 'object',
                      properties: {
                        tripId: { type: 'string', example: '507f1f77bcf86cd799439012' },
                        seatCount: { type: 'number', example: 2 },
                        basePrice: { type: 'number', example: 100000 },
                        totalPrice: { type: 'number', example: 200000 },
                        voucher: {
                          type: 'object',
                          properties: {
                            code: { type: 'string', example: 'SUMMER2025' },
                            name: { type: 'string', example: 'Summer Discount' },
                            discountType: { type: 'string', enum: ['PERCENTAGE', 'FIXED'], example: 'PERCENTAGE' },
                            discountValue: { type: 'number', example: 10 },
                          },
                        },
                        discountAmount: { type: 'number', example: 20000 },
                        finalPrice: { type: 'number', example: 180000 },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'voucher.invalid' },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Chuy·∫øn ƒëi kh√¥ng t√¨m th·∫•y',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'trip.notFound' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/bookings': {
      post: {
        tags: ['Booking'],
        summary: 'T·∫°o m·ªõi m·ªôt ƒë·∫∑t v√©',
        description:
          'T·∫°o ƒë·∫∑t v√© m·ªõi v·ªõi th√¥ng tin chuy·∫øn ƒëi, gh·∫ø v√† m√£ gi·∫£m gi√° (n·∫øu c√≥). H·ªó tr·ª£ ƒë·∫∑t v√© cho kh√°ch kh√¥ng ƒëƒÉng nh·∫≠p.',
        security: [{ BearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  tripId: {
                    type: 'string',
                    description: 'ID c·ªßa chuy·∫øn ƒëi',
                    example: '507f1f77bcf86cd799439012',
                  },
                  seatIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Danh s√°ch ID c·ªßa c√°c gh·∫ø ƒë∆∞·ª£c ch·ªçn',
                    example: ['507f1f77bcf86cd799439013', '507f1f77bcf86cd799439014'],
                    minItems: 1,
                  },
                  voucherCode: {
                    type: 'string',
                    description: 'M√£ gi·∫£m gi√° (y√™u c·∫ßu x√°c th·ª±c)',
                    example: 'SUMMER2025',
                  },
                  guestName: {
                    type: 'string',
                    description: 'T√™n kh√°ch h√†ng (d√πng cho ƒë·∫∑t v√© kh√¥ng ƒëƒÉng nh·∫≠p)',
                    example: 'John Doe',
                  },
                  guestPhone: {
                    type: 'string',
                    description: 'S·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng (d√πng cho ƒë·∫∑t v√© kh√¥ng ƒëƒÉng nh·∫≠p)',
                    example: '+84123456789',
                  },
                  guestEmail: {
                    type: 'string',
                    format: 'email',
                    description: 'Email kh√°ch h√†ng (d√πng cho ƒë·∫∑t v√© kh√¥ng ƒëƒÉng nh·∫≠p)',
                    example: 'john.doe@example.com',
                  },
                  pickupId: {
                    type: 'string',
                    description: 'Id c·ªßa bus stop ƒëi·ªÉm ƒë√≥n',
                    example: '507f1f77bcf86cd799439014',
                  },
                  dropoffId: {
                    type: 'string',
                    description: 'Id c·ªßa bus stop ƒëi·ªÉm ƒë·∫øn',
                    example: '507f1f77bcf86cd799439015',
                  },
                  customerNotes: {
                    type: 'string',
                    description: 'Ghi ch√∫ c·ªßa kh√°ch h√†ng',
                    example: 'G·∫ßn c·ª≠a s·ªï',
                  },
                },
                required: ['tripId', 'seatIds'],
                anyOf: [
                  {
                    required: ['guestName', 'guestPhone', 'guestEmail'],
                  },
                  {
                    not: {
                      required: ['guestName', 'guestPhone', 'guestEmail'],
                    },
                  },
                ],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒê·∫∑t v√© th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.created' },
                    data: { $ref: '#/components/schemas/Booking' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, gh·∫ø kh√¥ng kh·∫£ d·ª•ng ho·∫∑c m√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: {
                      type: 'string',
                      enum: [
                        'booking.missingRequiredFields',
                        'booking.tooManySeats',
                        'booking.invalidTripStatus',
                        'booking.invalidSeats',
                        'booking.seatsNotAvailable',
                        'voucher.invalid',
                        'voucher.limitReached',
                        'voucher.userLimitReached',
                        'voucher.notApplicableForRoute',
                        'voucher.minOrderNotMet',
                      ],
                      example: 'booking.seatsNotAvailable',
                    },
                    data: {
                      type: 'object',
                      properties: {
                        maxSeats: { type: 'integer', example: 5 },
                        seats: {
                          type: 'array',
                          items: { type: 'string' },
                          example: ['A1', 'A2'],
                        },
                        minOrder: { type: 'number', example: 100000 },
                      },
                    },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Chuy·∫øn ƒëi kh√¥ng t√¨m th·∫•y',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'trip.notFound' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/bookings/{id}/payment/qr-code': {
      get: {
        tags: ['Booking'],
        summary: 'T·∫°o m√£ QR thanh to√°n cho ƒë·∫∑t v√©',
        description:
          'T·∫°o m√£ QR thanh to√°n VietQR cho m·ªôt ƒë·∫∑t v√© ƒëang ch·ªù x·ª≠ l√Ω. Ch·ªâ ch·ªß s·ªü h·ªØu ho·∫∑c qu·∫£n tr·ªã vi√™n c√≥ th·ªÉ truy c·∫≠p.',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            description: 'ID c·ªßa ƒë·∫∑t v√©',
            required: true,
            schema: { type: 'string', example: '507f1f77bcf86cd799439014' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'T·∫°o m√£ QR thanh to√°n th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.qrGenerated' },
                    data: {
                      type: 'object',
                      properties: {
                        bookingId: { type: 'string', example: '507f1f77bcf86cd799439014' },
                        qrCode: {
                          type: 'string',
                          example:
                            '{"type":"VietQR","bankId":"970436","accountNo":"0123456789","amount":180000,"addInfo":"BKG12345678901234","url":"https://img.vietqr.io/image/..."}',
                        },
                        qrCodeExpiresAt: { type: 'string', format: 'date-time', example: '2025-07-02T10:00:00Z' },
                        paymentReference: { type: 'string', example: 'BKG12345678901234' },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'ƒê·∫∑t v√© kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù x·ª≠ l√Ω',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.alreadyProcessed' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng c√≥ quy·ªÅn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
          '404': {
            description: 'ƒê·∫∑t v√© kh√¥ng t√¨m th·∫•y',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.notFound' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/bookings/my-bookings': {
      get: {
        tags: ['Booking'],
        summary: 'L·∫•y danh s√°ch ƒë·∫∑t v√© c·ªßa ng∆∞·ªùi d√πng',
        description: 'L·∫•y danh s√°ch t·∫•t c·∫£ ƒë·∫∑t v√© c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i v·ªõi ph√¢n trang',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'page',
            in: 'query',
            description: 'S·ªë trang',
            schema: { type: 'integer', example: 1 },
          },
          {
            name: 'pageSize',
            in: 'query',
            description: 'S·ªë l∆∞·ª£ng b·∫£n ghi m·ªói trang',
            schema: { type: 'integer', example: 10 },
          },
          {
            name: 'status',
            in: 'query',
            description: 'L·ªçc theo tr·∫°ng th√°i ƒë·∫∑t v√©',
            schema: { type: 'string', enum: ['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED'] },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'L·∫•y danh s√°ch ƒë·∫∑t v√© th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.listRetrieved' },
                    data: {
                      type: 'object',
                      properties: {
                        data: {
                          type: 'array',
                          items: { $ref: '#/components/schemas/Booking' },
                        },
                        pagination: {
                          type: 'object',
                          properties: {
                            page: { type: 'integer', example: 1 },
                            pageSize: { type: 'integer', example: 10 },
                            totalCount: { type: 'integer', example: 50 },
                            totalPages: { type: 'integer', example: 5 },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
        },
      },
    },
    '/bookings/{id}/resend-payment': {
      post: {
        tags: ['Booking'],
        summary: 'G·ª≠i l·∫°i m√£ QR thanh to√°n',
        description: 'G·ª≠i l·∫°i m√£ QR thanh to√°n cho m·ªôt ƒë·∫∑t v√© ƒëang ch·ªù x·ª≠ l√Ω',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            description: 'ID c·ªßa ƒë·∫∑t v√©',
            required: true,
            schema: { type: 'string', example: '507f1f77bcf86cd799439014' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'G·ª≠i l·∫°i m√£ QR thanh to√°n th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.paymentQrResent' },
                    data: {
                      type: 'object',
                      properties: {
                        bookingId: { type: 'string', example: '507f1f77bcf86cd799439014' },
                        qrCode: {
                          type: 'string',
                          example:
                            '{"type":"VietQR","bankId":"970436","accountNo":"0123456789","amount":180000,"addInfo":"BKG12345678901234","url":"https://img.vietqr.io/image/..."}',
                        },
                        qrCodeExpiresAt: { type: 'string', format: 'date-time', example: '2025-07-02T10:00:00Z' },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'ƒê·∫∑t v√© kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù x·ª≠ l√Ω',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.notPending' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng c√≥ quy·ªÅn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
          '404': {
            description: 'ƒê·∫∑t v√© kh√¥ng t√¨m th·∫•y',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.notFound' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/bookings/{id}/cancel': {
      post: {
        tags: ['Booking'],
        summary: 'H·ªßy ƒë·∫∑t v√©',
        description: 'H·ªßy m·ªôt ƒë·∫∑t v√© c·ªßa ng∆∞·ªùi d√πng ho·∫∑c qu·∫£n tr·ªã vi√™n',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            description: 'ID c·ªßa ƒë·∫∑t v√©',
            required: true,
            schema: { type: 'string', example: '507f1f77bcf86cd799439014' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  reason: {
                    type: 'string',
                    description: 'L√Ω do h·ªßy ƒë·∫∑t v√©',
                    example: 'K·∫ø ho·∫°ch thay ƒë·ªïi',
                  },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'H·ªßy ƒë·∫∑t v√© th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.cancelled' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'ƒê·∫∑t v√© ƒë√£ b·ªã h·ªßy ho·∫∑c chuy·∫øn ƒëi ƒë√£ kh·ªüi h√†nh',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.alreadyCancelled' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng c√≥ quy·ªÅn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
          '404': {
            description: 'ƒê·∫∑t v√© kh√¥ng t√¨m th·∫•y',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.notFound' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/bookings/{id}/history': {
      get: {
        tags: ['Booking'],
        summary: 'L·∫•y l·ªãch s·ª≠ thay ƒë·ªïi c·ªßa ƒë·∫∑t v√©',
        description: 'L·∫•y l·ªãch s·ª≠ t·∫•t c·∫£ c√°c thay ƒë·ªïi c·ªßa m·ªôt ƒë·∫∑t v√©',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            description: 'ID c·ªßa ƒë·∫∑t v√©',
            required: true,
            schema: { type: 'string', example: '507f1f77bcf86cd799439014' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'L·∫•y l·ªãch s·ª≠ ƒë·∫∑t v√© th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.historyRetrieved' },
                    data: {
                      type: 'array',
                      items: { $ref: '#/components/schemas/BookingHistory' },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng c√≥ quy·ªÅn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
          '404': {
            description: 'ƒê·∫∑t v√© kh√¥ng t√¨m th·∫•y',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.notFound' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/bookings/{id}': {
      get: {
        tags: ['Booking'],
        summary: 'L·∫•y chi ti·∫øt ƒë·∫∑t v√©',
        description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ƒë·∫∑t v√©',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            description: 'ID c·ªßa ƒë·∫∑t v√©',
            required: true,
            schema: { type: 'string', example: '507f1f77bcf86cd799439014' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'L·∫•y chi ti·∫øt ƒë·∫∑t v√© th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.detailsRetrieved' },
                    data: { $ref: '#/components/schemas/Booking' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng c√≥ quy·ªÅn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
          '404': {
            description: 'ƒê·∫∑t v√© kh√¥ng t√¨m th·∫•y',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.notFound' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/bookings/webhook/payment': {
      post: {
        tags: ['Booking'],
        summary: 'X·ª≠ l√Ω webhook thanh to√°n t·ª´ SePay',
        description: 'X·ª≠ l√Ω th√¥ng b√°o thanh to√°n t·ª´ d·ªãch v·ª• SePay ƒë·ªÉ x√°c nh·∫≠n ƒë·∫∑t v√©',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  gateway: { type: 'string', example: 'SePay' },
                  transactionDate: { type: 'string', format: 'date-time', example: '2025-07-02T09:47:00Z' },
                  accountNumber: { type: 'string', example: '0123456789' },
                  code: { type: 'string', example: 'PAYMENT_SUCCESS' },
                  content: { type: 'string', example: 'BKG12345678901234 John Doe' },
                  transferType: { type: 'string', example: 'TRANSFER' },
                  transferAmount: { type: 'string', example: '180000' },
                  accumulated: { type: 'string', example: '180000' },
                  referenceCode: { type: 'string', example: 'BKG12345678901234' },
                  description: { type: 'string', example: 'Payment for booking' },
                },
                required: ['content', 'transferAmount'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Webhook ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'payment.webhookReceived' },
                    data: {
                      type: 'object',
                      properties: {
                        bookingId: { type: 'string', example: '507f1f77bcf86cd799439014' },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'D·ªØ li·ªáu webhook kh√¥ng h·ª£p l·ªá',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'payment.invalidWebhookPayload' },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/bookings/admin/all': {
      get: {
        tags: ['Booking'],
        summary: 'L·∫•y t·∫•t c·∫£ ƒë·∫∑t v√© (qu·∫£n tr·ªã vi√™n)',
        description: 'L·∫•y danh s√°ch t·∫•t c·∫£ ƒë·∫∑t v√© v·ªõi c√°c b·ªô l·ªçc v√† ph√¢n trang (y√™u c·∫ßu quy·ªÅn qu·∫£n tr·ªã vi√™n)',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'page',
            in: 'query',
            description: 'S·ªë trang',
            schema: { type: 'integer', example: 1 },
          },
          {
            name: 'pageSize',
            in: 'query',
            description: 'S·ªë l∆∞·ª£ng b·∫£n ghi m·ªói trang',
            schema: { type: 'integer', example: 10 },
          },
          {
            name: 'status',
            in: 'query',
            description: 'L·ªçc theo tr·∫°ng th√°i ƒë·∫∑t v√©',
            schema: { type: 'string', enum: ['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED'] },
          },
          {
            name: 'paymentStatus',
            in: 'query',
            description: 'L·ªçc theo tr·∫°ng th√°i thanh to√°n',
            schema: { type: 'string', enum: ['PENDING', 'COMPLETED', 'FAILED'] },
          },
          {
            name: 'userId',
            in: 'query',
            description: 'L·ªçc theo ID ng∆∞·ªùi d√πng',
            schema: { type: 'string', example: '507f1f77bcf86cd799439011' },
          },
          {
            name: 'tripId',
            in: 'query',
            description: 'L·ªçc theo ID chuy·∫øn ƒëi',
            schema: { type: 'string', example: '507f1f77bcf86cd799439012' },
          },
          {
            name: 'startDate',
            in: 'query',
            description: 'L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)',
            schema: { type: 'string', format: 'date', example: '2025-07-01' },
          },
          {
            name: 'endDate',
            in: 'query',
            description: 'L·ªçc theo ng√†y k·∫øt th√∫c (YYYY-MM-DD)',
            schema: { type: 'string', format: 'date', example: '2025-07-31' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'L·∫•y danh s√°ch ƒë·∫∑t v√© th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.adminListRetrieved' },
                    data: {
                      type: 'object',
                      properties: {
                        data: {
                          type: 'array',
                          items: { $ref: '#/components/schemas/Booking' },
                        },
                        pagination: {
                          type: 'object',
                          properties: {
                            page: { type: 'integer', example: 1 },
                            pageSize: { type: 'integer', example: 10 },
                            totalCount: { type: 'integer', example: 50 },
                            totalPages: { type: 'integer', example: 5 },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng c√≥ quy·ªÅn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
        },
      },
    },
    '/bookings/admin/stats': {
      get: {
        tags: ['Booking'],
        summary: 'L·∫•y th·ªëng k√™ ƒë·∫∑t v√© (qu·∫£n tr·ªã vi√™n)',
        description: 'L·∫•y th·ªëng k√™ v·ªÅ ƒë·∫∑t v√© trong m·ªôt kho·∫£ng th·ªùi gian (y√™u c·∫ßu quy·ªÅn qu·∫£n tr·ªã vi√™n)',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'startDate',
            in: 'query',
            description: 'Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)',
            schema: { type: 'string', format: 'date', example: '2025-07-01' },
          },
          {
            name: 'endDate',
            in: 'query',
            description: 'Ng√†y k·∫øt th√∫c (YYYY-MM-DD)',
            schema: { type: 'string', format: 'date', example: '2025-07-31' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'L·∫•y th·ªëng k√™ th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.statsRetrieved' },
                    data: {
                      type: 'object',
                      properties: {
                        totalBookings: { type: 'integer', example: 100 },
                        completedBookings: { type: 'integer', example: 80 },
                        cancelledBookings: { type: 'integer', example: 15 },
                        pendingBookings: { type: 'integer', example: 5 },
                        revenue: { type: 'number', example: 15000000 },
                        discounts: { type: 'number', example: 500000 },
                        topRoutes: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string', example: '507f1f77bcf86cd799439015' },
                              name: { type: 'string', example: 'HCM - Hanoi' },
                              sourceProvince: { type: 'string', example: 'Ho Chi Minh City' },
                              destinationProvince: { type: 'string', example: 'Hanoi' },
                              bookingCount: { type: 'integer', example: 30 },
                            },
                          },
                        },
                        dailyBookings: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              date: { type: 'string', example: '2025-07-01' },
                              count: { type: 'integer', example: 10 },
                              completed: { type: 'integer', example: 8 },
                              cancelled: { type: 'integer', example: 1 },
                              pending: { type: 'integer', example: 1 },
                            },
                          },
                        },
                        timeRange: {
                          type: 'object',
                          properties: {
                            startDate: { type: 'string', format: 'date-time', example: '2025-07-01T00:00:00Z' },
                            endDate: { type: 'string', format: 'date-time', example: '2025-07-31T23:59:59Z' },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng c√≥ quy·ªÅn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
        },
      },
    },
    '/bookings/admin/export': {
      get: {
        tags: ['Booking'],
        summary: 'Xu·∫•t d·ªØ li·ªáu ƒë·∫∑t v√© (qu·∫£n tr·ªã vi√™n)',
        description: 'Xu·∫•t d·ªØ li·ªáu ƒë·∫∑t v√© ra ƒë·ªãnh d·∫°ng JSON ho·∫∑c CSV (y√™u c·∫ßu quy·ªÅn qu·∫£n tr·ªã vi√™n)',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'startDate',
            in: 'query',
            description: 'Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)',
            schema: { type: 'string', format: 'date', example: '2025-07-01' },
          },
          {
            name: 'endDate',
            in: 'query',
            description: 'Ng√†y k·∫øt th√∫c (YYYY-MM-DD)',
            schema: { type: 'string', format: 'date', example: '2025-07-31' },
          },
          {
            name: 'format',
            in: 'query',
            description: 'ƒê·ªãnh d·∫°ng xu·∫•t (json ho·∫∑c csv)',
            schema: { type: 'string', enum: ['json', 'csv'], example: 'json' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        responses: {
          '200': {
            description: 'Xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.dataExported' },
                    data: {
                      type: 'array',
                      items: { $ref: '#/components/schemas/BookingExport' },
                    },
                  },
                },
              },
              'text/csv': {
                schema: {
                  type: 'string',
                  example:
                    'bookingId,bookingDate,customer,email,phone,route,departureTime,seats,seatCount,basePrice,discount,finalPrice,status,paymentStatus,voucher\n507f1f77bcf86cd799439014,2025-07-02T09:47:00Z,"John Doe",john.doe@example.com,+84123456789,"HCM ‚Üí Hanoi",2025-07-03T08:00:00Z,"A1,A2",2,200000,20000,180000,CONFIRMED,COMPLETED,SUMMER2025',
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng c√≥ quy·ªÅn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
        },
      },
    },
    '/bookings/{id}/admin/confirm': {
      post: {
        tags: ['Booking'],
        summary: 'X√°c nh·∫≠n ƒë·∫∑t v√© th·ªß c√¥ng (qu·∫£n tr·ªã vi√™n)',
        description: 'X√°c nh·∫≠n th·ªß c√¥ng m·ªôt ƒë·∫∑t v√© b·ªüi qu·∫£n tr·ªã vi√™n',
        security: [{ BearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            description: 'ID c·ªßa ƒë·∫∑t v√©',
            required: true,
            schema: { type: 'string', example: '507f1f77bcf86cd799439014' },
          },
          {
            name: 'lang',
            in: 'query',
            description: 'Ng√¥n ng·ªØ tr·∫£ v·ªÅ th√¥ng b√°o',
            schema: { type: 'string', example: 'en' },
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  notes: {
                    type: 'string',
                    description: 'Ghi ch√∫ cho vi·ªác x√°c nh·∫≠n th·ªß c√¥ng',
                    example: 'X√°c nh·∫≠n b·ªüi qu·∫£n tr·ªã vi√™n do thanh to√°n ngo·∫°i tuy·∫øn',
                  },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'X√°c nh·∫≠n ƒë·∫∑t v√© th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: true },
                    message: { type: 'string', example: 'booking.manuallyConfirmed' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'ƒê·∫∑t v√© kh√¥ng th·ªÉ x√°c nh·∫≠n',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.alreadyConfirmed' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng c√≥ quy·ªÅn',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
          '404': {
            description: 'ƒê·∫∑t v√© kh√¥ng t√¨m th·∫•y',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'booking.notFound' },
                  },
                },
              },
            },
          },
        },
      },
    },
    // Real-time
    '/socket.io': {
      get: {
        tags: ['Realtime'],
        summary: 'K·∫øt n·ªëi Socket.IO',
        description: 'Kh·ªüi t·∫°o k·∫øt n·ªëi th·ªùi gian th·ª±c v·ªõi Socket.IO, h·ªó tr·ª£ x√°c th·ª±c b·∫±ng JWT',
        parameters: [
          {
            name: 'token',
            in: 'query',
            description: 'JWT token ƒë·ªÉ x√°c th·ª±c (t√πy ch·ªçn cho c√°c ph√≤ng c√¥ng c·ªông)',
            required: false,
            schema: {
              type: 'string',
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
            },
          },
        ],
        responses: {
          '101': {
            description: 'K·∫øt n·ªëi WebSocket ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng',
          },
          '401': {
            description: 'Kh√¥ng ƒë∆∞·ª£c ph√©p (token kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu cho ph√≤ng ri√™ng t∆∞)',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    success: { type: 'boolean', example: false },
                    message: { type: 'string', example: 'Authentication required' },
                  },
                },
              },
            },
          },
        },
      },
      post: {
        tags: ['Realtime'],
        summary: 'S·ª± ki·ªán Socket.IO',
        description: 'X·ª≠ l√Ω c√°c s·ª± ki·ªán th·ªùi gian th·ª±c cho ƒë·∫∑t v√© v√† qu·∫£n l√Ω ph√≤ng',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  { $ref: '#/components/schemas/JoinTripRoom' },
                  { $ref: '#/components/schemas/LeaveTripRoom' },
                  { $ref: '#/components/schemas/SelectSeat' },
                  { $ref: '#/components/schemas/ReleaseSeat' },
                  { $ref: '#/components/schemas/JoinBookingRoom' },
                  { $ref: '#/components/schemas/LeaveBookingRoom' },
                  { $ref: '#/components/schemas/SendPrivateMessage' },
                ],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'S·ª± ki·ªán ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  oneOf: [
                    { $ref: '#/components/schemas/SeatSelectionResponse' },
                    { $ref: '#/components/schemas/SeatReleaseResponse' },
                    { $ref: '#/components/schemas/RoomAccessResponse' },
                    { $ref: '#/components/schemas/SeatStatusChanged' },
                    { $ref: '#/components/schemas/BookingStatusChanged' },
                    { $ref: '#/components/schemas/PrivateMessage' },
                    { $ref: '#/components/schemas/SeatExpirationWarning' },
                  ],
                },
              },
            },
          },
          '401': {
            description: 'Y√™u c·∫ßu x√°c th·ª±c cho c√°c s·ª± ki·ªán ri√™ng t∆∞',
            content: {
              'application/json': {
                schema: { $ref: '#/components/schemas/ErrorResponse' },
              },
            },
          },
        },
      },
    },
  },
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
      },
    },
    schemas: {
      Route: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          code: { type: 'string' },
          name: { type: 'string' },
          direction: { type: 'string', nullable: true },
          sourceProvinceId: { type: 'string' },
          destinationProvinceId: { type: 'string' },
          distance: { type: 'number' },
          distanceUnit: { type: 'string', enum: ['KM', 'MILE'] },
          estimatedDuration: { type: 'integer' },
          image: { type: 'string', nullable: true },
          imageUrl: { type: 'string', nullable: true },
          status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'] },
          isDeleted: { type: 'boolean' },
          sourceProvince: { $ref: '#/components/schemas/Province' },
          destinationProvince: { $ref: '#/components/schemas/Province' },
          routeStops: { type: 'array', items: { $ref: '#/components/schemas/RouteStop' } },
        },
        required: [
          'id',
          'code',
          'name',
          'sourceProvinceId',
          'destinationProvinceId',
          'distance',
          'distanceUnit',
          'estimatedDuration',
          'status',
          'isDeleted',
        ],
      },
      BusStop: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          wardId: { type: 'string' },
          latitude: { type: 'number', nullable: true },
          longitude: { type: 'number', nullable: true },
          status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'] },
          isDeleted: { type: 'boolean' },
          ward: { $ref: '#/components/schemas/Ward' },
          routeStops: { type: 'array', items: { $ref: '#/components/schemas/RouteStop' } },
        },
        required: ['id', 'name', 'wardId', 'status', 'isDeleted'],
      },
      RouteStop: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          routeId: { type: 'string' },
          busStopId: { type: 'string' },
          stopOrder: { type: 'integer' },
          estimatedArrivalTime: { type: 'string', format: 'date-time', nullable: true },
          estimatedDepartureTime: { type: 'string', format: 'date-time', nullable: true },
          status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'] },
          isDeleted: { type: 'boolean' },
          route: { $ref: '#/components/schemas/Route' },
          busStop: { $ref: '#/components/schemas/BusStop' },
        },
        required: ['id', 'routeId', 'busStopId', 'stopOrder', 'status', 'isDeleted'],
      },
      VehicleType: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          description: { type: 'string', nullable: true },
          seatConfiguration: { type: 'object' },
          status: { type: 'string', enum: ['ACTIVE', 'INACTIVE'] },
          isDeleted: { type: 'boolean' },
          vehicles: { type: 'array', items: { $ref: '#/components/schemas/Vehicle' } },
        },
        required: ['id', 'name', 'seatConfiguration', 'status', 'isDeleted'],
      },
      Vehicle: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          plateNumber: { type: 'string' },
          registrationCode: { type: 'string' },
          vehicleTypeId: { type: 'string' },
          driverId: { type: 'string', nullable: true },
          registrationExpiryDate: { type: 'string', format: 'date-time' },
          image: { type: 'string', nullable: true },
          imageUrl: { type: 'string', nullable: true },
          status: { type: 'string', enum: ['ACTIVE', 'INACTIVE', 'MAINTENANCE'] },
          isDeleted: { type: 'boolean' },
          vehicleType: { $ref: '#/components/schemas/VehicleType' },
          driver: { type: 'object', nullable: true },
        },
        required: [
          'id',
          'plateNumber',
          'registrationCode',
          'vehicleTypeId',
          'registrationExpiryDate',
          'status',
          'isDeleted',
        ],
      },
      Province: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          code: { type: 'string' },
          latitude: { type: 'number', nullable: true },
          longitude: { type: 'number', nullable: true },
          status: { type: 'string' },
        },
        required: ['id', 'name', 'code', 'status'],
      },
      Ward: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          latitude: { type: 'number', nullable: true },
          longitude: { type: 'number', nullable: true },
          status: { type: 'string' },
        },
        required: ['id', 'name', 'status'],
      },
      Trip: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          routeId: { type: 'string' },
          vehicleId: { type: 'string' },
          departureTime: { type: 'string', format: 'date-time' },
          arrivalTime: { type: 'string', format: 'date-time' },
          basePrice: { type: 'number' },
          specialPrice: { type: 'number', nullable: true },
          status: {
            type: 'string',
            enum: ['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'],
          },
          image: { type: 'string', nullable: true },
          imageUrl: { type: 'string', nullable: true },
          deletedAt: { type: 'string', format: 'date-time', nullable: true },
        },
      },
      TripWithDetails: {
        allOf: [
          { $ref: '#/components/schemas/Trip' },
          {
            type: 'object',
            properties: {
              route: {
                type: 'object',
                properties: {
                  id: { type: 'string' },
                  name: { type: 'string' },
                  sourceProvince: {
                    type: 'object',
                    properties: {
                      id: { type: 'string' },
                      name: { type: 'string' },
                    },
                  },
                  destinationProvince: {
                    type: 'object',
                    properties: {
                      id: { type: 'string' },
                      name: { type: 'string' },
                    },
                  },
                },
              },
              vehicle: {
                type: 'object',
                properties: {
                  id: { type: 'string' },
                  plateNumber: { type: 'string' },
                  vehicleType: {
                    type: 'object',
                    properties: {
                      id: { type: 'string' },
                      name: { type: 'string' },
                      seatConfiguration: { type: 'object' },
                    },
                  },
                  driver: {
                    type: 'object',
                    nullable: true,
                    properties: {
                      id: { type: 'string' },
                      name: { type: 'string' },
                      phoneNumber: { type: 'string' },
                      avatarUrl: { type: 'string', nullable: true },
                    },
                  },
                },
              },
              seats: {
                type: 'array',
                items: { $ref: '#/components/schemas/Seat' },
              },
              availableSeats: { type: 'integer' },
            },
          },
        ],
      },
      Seat: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          tripId: { type: 'string' },
          seatNumber: { type: 'string' },
          seatType: { type: 'string', enum: ['STANDARD', 'PREMIUM', 'VIP'] },
          status: { type: 'string', enum: ['AVAILABLE', 'BOOKED', 'RESERVED'] },
        },
      },
      SeatReservation: {
        type: 'object',
        properties: {
          userId: {
            type: 'string',
            description: 'ID c·ªßa ng∆∞·ªùi d√πng ƒë·∫∑t ch·ªó',
            example: '507f1f77bcf86cd799439011',
          },
          tripId: {
            type: 'string',
            description: 'ID c·ªßa chuy·∫øn ƒëi',
            example: '507f1f77bcf86cd799439012',
          },
          seatId: {
            type: 'string',
            description: 'ID c·ªßa gh·∫ø',
            example: '507f1f77bcf86cd799439013',
          },
          expireAt: {
            type: 'string',
            format: 'date-time',
            description: 'Th·ªùi gian h·∫øt h·∫°n c·ªßa ƒë·∫∑t ch·ªó',
            example: '2025-07-02T10:00:00Z',
          },
          sessionId: {
            type: 'string',
            description: 'M√£ ƒë·ªãnh danh phi√™n (t√πy ch·ªçn)',
            example: 'session-12345',
          },
        },
        required: ['userId', 'tripId', 'seatId', 'expireAt'],
      },
      SeatSelectionResponse: {
        type: 'object',
        properties: {
          seatId: {
            type: 'string',
            description: 'ID c·ªßa gh·∫ø ƒë∆∞·ª£c ch·ªçn',
            example: '507f1f77bcf86cd799439013',
          },
          expireAt: {
            type: 'string',
            format: 'date-time',
            description: 'Th·ªùi gian h·∫øt h·∫°n c·ªßa ƒë·∫∑t ch·ªó gh·∫ø',
            example: '2025-07-02T10:00:00Z',
          },
          error: {
            type: 'string',
            description: 'Th√¥ng b√°o l·ªói n·∫øu thao t√°c th·∫•t b·∫°i',
            example: 'Gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t',
          },
        },
        required: ['seatId'],
      },
      SeatReleaseResponse: {
        type: 'object',
        properties: {
          seatId: {
            type: 'string',
            description: 'ID c·ªßa gh·∫ø ƒë∆∞·ª£c gi·∫£i ph√≥ng',
            example: '507f1f77bcf86cd799439013',
          },
          error: {
            type: 'string',
            description: 'Th√¥ng b√°o l·ªói n·∫øu thao t√°c th·∫•t b·∫°i',
            example: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ch·ªó cho gh·∫ø n√†y',
          },
        },
        required: ['seatId'],
      },
      SeatStatusChanged: {
        type: 'object',
        properties: {
          seatId: {
            type: 'string',
            description: 'ID c·ªßa gh·∫ø',
            example: '507f1f77bcf86cd799439013',
          },
          status: {
            type: 'string',
            enum: ['AVAILABLE', 'RESERVED', 'BOOKED', 'BLOCKED'],
            description: 'Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa gh·∫ø',
            example: 'RESERVED',
          },
          seatNumber: {
            type: 'string',
            description: 'S·ªë gh·∫ø',
            example: 'A1',
          },
          reservedBy: {
            type: 'string',
            description: 'ID c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t gh·∫ø',
            example: '507f1f77bcf86cd799439011',
          },
          sessionId: {
            type: 'string',
            description: 'M√£ ƒë·ªãnh danh phi√™n',
            example: 'session-12345',
          },
          expireAt: {
            type: 'string',
            format: 'date-time',
            description: 'Th·ªùi gian h·∫øt h·∫°n c·ªßa ƒë·∫∑t ch·ªó',
            example: '2025-07-02T10:00:00Z',
          },
          reason: {
            type: 'string',
            description: 'L√Ω do thay ƒë·ªïi tr·∫°ng th√°i',
            example: 'expired',
          },
          updatedBy: {
            type: 'string',
            description: 'ID c·ªßa ng∆∞·ªùi d√πng ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i',
            example: '507f1f77bcf86cd799439011',
          },
        },
        required: ['seatId', 'status'],
      },
      BookingStatusChanged: {
        type: 'object',
        properties: {
          bookingId: {
            type: 'string',
            description: 'ID c·ªßa ƒë·∫∑t ch·ªó',
            example: '507f1f77bcf86cd799439014',
          },
          status: {
            type: 'string',
            enum: ['PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED'],
            description: 'Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ƒë·∫∑t ch·ªó',
            example: 'CONFIRMED',
          },
          finalPrice: {
            type: 'number',
            description: 'Gi√° cu·ªëi c√πng c·ªßa ƒë·∫∑t ch·ªó',
            example: 150000,
          },
          seatNumbers: {
            type: 'string',
            description: 'Danh s√°ch s·ªë gh·∫ø c√°ch nhau b·∫±ng d·∫•u ph·∫©y',
            example: 'A1,A2',
          },
          updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'Th·ªùi gian c·∫≠p nh·∫≠t tr·∫°ng th√°i',
            example: '2025-07-02T09:47:00Z',
          },
        },
        required: ['bookingId', 'status', 'updatedAt'],
      },
      RoomAccessResponse: {
        type: 'object',
        properties: {
          success: {
            type: 'boolean',
            description: 'Th√†nh c√¥ng khi tham gia ho·∫∑c r·ªùi ph√≤ng',
            example: true,
          },
          error: {
            type: 'string',
            description: 'Th√¥ng b√°o l·ªói n·∫øu thao t√°c th·∫•t b·∫°i',
            example: 'Y√™u c·∫ßu x√°c th·ª±c',
          },
        },
        required: ['success'],
      },
      PrivateMessage: {
        type: 'object',
        properties: {
          userId: {
            type: 'string',
            description: 'ID c·ªßa ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn',
            example: '507f1f77bcf86cd799439011',
          },
          message: {
            type: 'string',
            description: 'N·ªôi dung tin nh·∫Øn',
            example: 'Xin ch√†o, t√¥i c·∫ßn h·ªó tr·ª£ v·ªÅ ƒë·∫∑t v√©',
          },
          timestamp: {
            type: 'string',
            format: 'date-time',
            description: 'Th·ªùi gian g·ª≠i tin nh·∫Øn',
            example: '2025-07-02T09:47:00Z',
          },
        },
        required: ['userId', 'message', 'timestamp'],
      },
      ErrorResponse: {
        type: 'object',
        properties: {
          event: {
            type: 'string',
            description: 'T√™n s·ª± ki·ªán g√¢y ra l·ªói',
            example: 'sendPrivateMessage',
          },
          message: {
            type: 'string',
            description: 'Th√¥ng b√°o l·ªói',
            example: 'Y√™u c·∫ßu x√°c th·ª±c cho h√†nh ƒë·ªông n√†y',
          },
        },
        required: ['message'],
      },
      SeatExpirationWarning: {
        type: 'object',
        properties: {
          seatId: {
            type: 'string',
            description: 'ID c·ªßa gh·∫ø',
            example: '507f1f77bcf86cd799439013',
          },
          userId: {
            type: 'string',
            description: 'ID c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t gh·∫ø',
            example: '507f1f77bcf86cd799439011',
          },
          expireAt: {
            type: 'string',
            format: 'date-time',
            description: 'Th·ªùi gian h·∫øt h·∫°n c·ªßa ƒë·∫∑t ch·ªó',
            example: '2025-07-02T10:00:00Z',
          },
          remainingTime: {
            type: 'number',
            description: 'Th·ªùi gian c√≤n l·∫°i tr∆∞·ªõc khi ƒë·∫∑t ch·ªó h·∫øt h·∫°n (gi√¢y)',
            example: 120,
          },
        },
        required: ['seatId', 'userId', 'expireAt', 'remainingTime'],
      },
      JoinTripRoom: {
        type: 'object',
        properties: {
          event: {
            type: 'string',
            enum: ['joinTripRoom'],
            example: 'joinTripRoom',
          },
          tripId: {
            type: 'string',
            description: 'ID c·ªßa chuy·∫øn ƒëi ƒë·ªÉ tham gia',
            example: '507f1f77bcf86cd799439012',
          },
        },
        required: ['event', 'tripId'],
      },
      LeaveTripRoom: {
        type: 'object',
        properties: {
          event: {
            type: 'string',
            enum: ['leaveTripRoom'],
            example: 'leaveTripRoom',
          },
          tripId: {
            type: 'string',
            description: 'ID c·ªßa chuy·∫øn ƒëi ƒë·ªÉ r·ªùi',
            example: '507f1f77bcf86cd799439012',
          },
        },
        required: ['event', 'tripId'],
      },
      SelectSeat: {
        type: 'object',
        properties: {
          event: {
            type: 'string',
            enum: ['selectSeat'],
            example: 'selectSeat',
          },
          tripId: {
            type: 'string',
            description: 'ID c·ªßa chuy·∫øn ƒëi',
            example: '507f1f77bcf86cd799439012',
          },
          seatId: {
            type: 'string',
            description: 'ID c·ªßa gh·∫ø ƒë·ªÉ ch·ªçn',
            example: '507f1f77bcf86cd799439013',
          },
          userId: {
            type: 'string',
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
            example: '507f1f77bcf86cd799439011',
          },
          sessionId: {
            type: 'string',
            description: 'M√£ ƒë·ªãnh danh phi√™n (t√πy ch·ªçn)',
            example: 'session-12345',
          },
        },
        required: ['event', 'tripId', 'seatId', 'userId'],
      },
      ReleaseSeat: {
        type: 'object',
        properties: {
          event: {
            type: 'string',
            enum: ['releaseSeat'],
            example: 'releaseSeat',
          },
          tripId: {
            type: 'string',
            description: 'ID c·ªßa chuy·∫øn ƒëi',
            example: '507f1f77bcf86cd799439012',
          },
          seatId: {
            type: 'string',
            description: 'ID c·ªßa gh·∫ø ƒë·ªÉ gi·∫£i ph√≥ng',
            example: '507f1f77bcf86cd799439013',
          },
          userId: {
            type: 'string',
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
            example: '507f1f77bcf86cd799439011',
          },
        },
        required: ['event', 'tripId', 'seatId', 'userId'],
      },
      JoinBookingRoom: {
        type: 'object',
        properties: {
          event: {
            type: 'string',
            enum: ['joinBookingRoom'],
            example: 'joinBookingRoom',
          },
          bookingId: {
            type: 'string',
            description: 'ID c·ªßa ƒë·∫∑t ch·ªó ƒë·ªÉ tham gia',
            example: '507f1f77bcf86cd799439014',
          },
        },
        required: ['event', 'bookingId'],
      },
      LeaveBookingRoom: {
        type: 'object',
        properties: {
          event: {
            type: 'string',
            enum: ['leaveBookingRoom'],
            example: 'leaveBookingRoom',
          },
          bookingId: {
            type: 'string',
            description: 'ID c·ªßa ƒë·∫∑t ch·ªó ƒë·ªÉ r·ªùi',
            example: '507f1f77bcf86cd799439014',
          },
        },
        required: ['event', 'bookingId'],
      },
      SendPrivateMessage: {
        type: 'object',
        properties: {
          event: {
            type: 'string',
            enum: ['sendPrivateMessage'],
            example: 'sendPrivateMessage',
          },
          tripId: {
            type: 'string',
            description: 'ID c·ªßa chuy·∫øn ƒëi',
            example: '507f1f77bcf86cd799439012',
          },
          message: {
            type: 'string',
            description: 'N·ªôi dung tin nh·∫Øn',
            example: 'Xin ch√†o, t√¥i c·∫ßn h·ªó tr·ª£ v·ªÅ ƒë·∫∑t v√©',
          },
        },
        required: ['event', 'tripId', 'message'],
      },
      Error: {
        type: 'object',
        properties: {
          message: { type: 'string' },
          error: {
            type: 'object',
            nullable: true,
            properties: {
              message: { type: 'string' },
            },
          },
        },
      },
    },
  },
};
