import { OpenAPIV3 } from 'openapi-types';

export const apiSpecification: OpenAPIV3.Document = {
  openapi: '3.0.0',
  info: {
    title: 'Booking App API',
    version: '1.0.0',
    description: `
    # Booking App REST API
    
    API documentation cho h·ªá th·ªëng ƒë·∫∑t v√© xe kh√°ch - Booking App.
    
    ## T√≠nh nƒÉng ch√≠nh
    - üîê X√°c th·ª±c & Ph√¢n quy·ªÅn
    - üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng
    - üìÖ Qu·∫£n l√Ω ƒë·∫∑t v√© xe kh√°ch
    - üè® Qu·∫£n l√Ω v√© xe kh√°ch
    `,
    contact: {
      name: 'API Support',
      email: 'support@bookingapp.com',
    },
    license: {
      name: 'MIT License',
      url: 'https://opensource.org/licenses/MIT',
    },
  },
  servers: [
    {
      url: process.env.WEBSERVICE_URL || 'http://localhost:5000/api',
      description: 'Test web server',
    },
  ],
  tags: [
    {
      name: 'Auth',
      description: 'Authentication endpoints',
    },
    {
      name: 'User',
      description: 'User management endpoints',
    },
    {
      name: 'Geo',
      description: 'Geographic information endpoints',
    },
    {
      name: 'Role',
      description: 'Role management endpoints',
    },
    {
      name: 'Permission',
      description: 'Permission management endpoints',
    },
  ],
  paths: {
    // Authentication
    '/auth/register': {
      post: {
        tags: ['Auth'],
        summary: 'ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi',
        description: 'ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi v√† g·ª≠i email x√°c th·ª±c',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', example: 'John Doe' },
                  email: { type: 'string', format: 'email', example: 'john@example.com' },
                  password: { type: 'string', format: 'password', example: 'Password123!' },
                  gender: {
                    type: 'string',
                    enum: ['MALE', 'FEMALE'],
                    example: 'MALE',
                  },
                  phoneNumber: { type: 'string', example: '+84123456789' },
                  age: { type: 'number', example: 25 },
                  address: { type: 'string', example: 'Ho Chi Minh City' },
                },
                required: ['name', 'email', 'password', 'gender', 'phoneNumber', 'age', 'address'],
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          },
        },
      },
    },
    '/auth/verify-email/{token}': {
      post: {
        tags: ['Auth'],
        summary: 'X√°c th·ª±c email',
        parameters: [
          {
            name: 'token',
            in: 'path',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c',
          },
          '400': {
            description: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n',
          },
        },
      },
    },
    '/auth/resend-verification': {
      post: {
        tags: ['Auth'],
        summary: 'G·ª≠i l·∫°i email x√°c th·ª±c',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  email: { type: 'string', format: 'email' },
                },
                required: ['email'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒê√£ g·ª≠i l·∫°i email x√°c th·ª±c',
          },
        },
      },
    },
    '/auth/check-verification-token/{token}': {
      get: {
        tags: ['Auth'],
        summary: 'Ki·ªÉm tra token x√°c th·ª±c email',
        parameters: [
          {
            name: 'token',
            in: 'path',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'Token h·ª£p l·ªá',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    isValid: { type: 'boolean' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n',
          },
        },
      },
    },
    '/auth/login': {
      post: {
        tags: ['Auth'],
        summary: 'ƒêƒÉng nh·∫≠p',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  email: { type: 'string', format: 'email' },
                  password: { type: 'string' },
                  rememberMe: { type: 'boolean' },
                },
                required: ['email', 'password'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    accessToken: { type: 'string' },
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        email: { type: 'string' },
                        role: { type: 'string' },
                        permissions: {
                          type: 'array',
                          items: { type: 'string' },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    '/auth/forgot-password': {
      post: {
        tags: ['Auth'],
        summary: 'Qu√™n m·∫≠t kh·∫©u',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  email: { type: 'string', format: 'email' },
                },
                required: ['email'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒê√£ g·ª≠i email kh√¥i ph·ª•c m·∫≠t kh·∫©u',
          },
        },
      },
    },
    '/auth/reset-password': {
      post: {
        tags: ['Auth'],
        summary: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  token: { type: 'string' },
                  password: { type: 'string' },
                  confirmPassword: { type: 'string' },
                },
                required: ['token', 'password', 'confirmPassword'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng',
          },
        },
      },
    },
    '/auth/change-password': {
      post: {
        tags: ['Auth'],
        summary: 'ƒê·ªïi m·∫≠t kh·∫©u',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  currentPassword: { type: 'string', format: 'password' },
                  newPassword: { type: 'string', format: 'password' },
                  confirmPassword: { type: 'string', format: 'password' },
                },
                required: ['currentPassword', 'newPassword', 'confirmPassword'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
          },
          '400': {
            description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c m·∫≠t kh·∫©u kh√¥ng kh·ªõp',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
        },
      },
    },
    '/auth/google': {
      get: {
        tags: ['Auth'],
        summary: 'ƒêƒÉng nh·∫≠p b·∫±ng Google',
        responses: {
          '302': {
            description: 'Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p Google',
          },
        },
      },
    },
    '/auth/google/callback': {
      get: {
        tags: ['Auth'],
        summary: 'Callback URL cho ƒëƒÉng nh·∫≠p Google',
        responses: {
          '200': {
            description: 'ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng',
          },
        },
      },
    },
    '/auth/refresh-access-token': {
      post: {
        tags: ['Auth'],
        summary: 'L√†m m·ªõi access token',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  refreshToken: { type: 'string' },
                },
                required: ['refreshToken'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    accessToken: { type: 'string' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n',
          },
        },
      },
    },
    '/auth/logout': {
      post: {
        tags: ['Auth'],
        summary: 'ƒêƒÉng xu·∫•t',
        security: [{ bearerAuth: [] }],
        responses: {
          '200': {
            description: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng',
          },
        },
      },
    },
    '/auth/logout-all-devices': {
      post: {
        tags: ['Auth'],
        summary: 'ƒêƒÉng xu·∫•t kh·ªèi t·∫•t c·∫£ thi·∫øt b·ªã',
        security: [{ bearerAuth: [] }],
        responses: {
          '200': {
            description: 'ƒê√£ ƒëƒÉng xu·∫•t kh·ªèi t·∫•t c·∫£ thi·∫øt b·ªã',
          },
        },
      },
    },
    // User
    '/users': {
      get: {
        tags: ['User'],
        summary: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng',
        description: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm',
          },
          {
            in: 'query',
            name: 'searchFields',
            schema: { type: 'string' },
            description: 'C√°c tr∆∞·ªùng t√¨m ki·∫øm, c√°ch nhau b·ªüi d·∫•u ph·∫©y (m·∫∑c ƒë·ªãnh: name,email,phoneNumber)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"name","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"AVAILABLE"})',
          },
          {
            in: 'query',
            name: 'returnAll',
            schema: { type: 'boolean' },
            description: 'Tr·∫£ v·ªÅ t·∫•t c·∫£ d·ªØ li·ªáu (b·ªè qua ph√¢n trang)',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch ng∆∞·ªùi d√πng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          email: { type: 'string' },
                          phoneNumber: { type: 'string' },
                          age: { type: 'number' },
                          gender: { type: 'string', enum: ['MALE', 'FEMALE'] },
                          status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                          avatar: { type: 'string', nullable: true },
                          address: { type: 'string', nullable: true },
                          role: {
                            type: 'object',
                            properties: {
                              name: { type: 'string' },
                              permissions: {
                                type: 'array',
                                items: {
                                  type: 'object',
                                  properties: {
                                    code: { type: 'string' },
                                    name: { type: 'string' },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_USER_MANAGE)',
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/{id}': {
      get: {
        tags: ['User'],
        summary: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
        description: 'L·∫•y chi ti·∫øt ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE ho·∫∑c SELF_ACCESS)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Th√¥ng tin ng∆∞·ªùi d√πng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        email: { type: 'string' },
                        phoneNumber: { type: 'string', nullable: true },
                        age: { type: 'number', nullable: true },
                        gender: { type: 'string', enum: ['MALE', 'FEMALE'], nullable: true },
                        status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                        avatar: { type: 'string', nullable: true },
                        address: { type: 'string', nullable: true },
                        avatarUrl: { type: 'string', nullable: true },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                            permissions: {
                              type: 'array',
                              items: {
                                type: 'object',
                                properties: {
                                  code: { type: 'string' },
                                  name: { type: 'string' },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['User'],
        summary: 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n ng∆∞·ªùi d√πng' },
                  email: { type: 'string', format: 'email', description: 'Email (y√™u c·∫ßu x√°c th·ª±c n·∫øu thay ƒë·ªïi)' },
                  phoneNumber: { type: 'string', description: 'S·ªë ƒëi·ªán tho·∫°i' },
                  gender: { type: 'string', enum: ['MALE', 'FEMALE'], description: 'Gi·ªõi t√≠nh' },
                  age: { type: 'number', description: 'Tu·ªïi' },
                  address: { type: 'string', description: 'ƒê·ªãa ch·ªâ' },
                  status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'], description: 'Tr·∫°ng th√°i (admin only)' },
                  avatar: { type: 'string', format: 'binary', description: 'File ·∫£nh ƒë·∫°i di·ªán' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        email: { type: 'string' },
                        phoneNumber: { type: 'string', nullable: true },
                        age: { type: 'number', nullable: true },
                        gender: { type: 'string', enum: ['MALE', 'FEMALE'], nullable: true },
                        status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                        avatar: { type: 'string', nullable: true },
                        address: { type: 'string', nullable: true },
                        avatarUrl: { type: 'string', nullable: true },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['User'],
        summary: 'X√≥a m·ªÅm ng∆∞·ªùi d√πng',
        description: 'X√≥a m·ªÅm ng∆∞·ªùi d√πng b·∫±ng c√°ch ƒë·∫∑t tr·∫°ng th√°i th√†nh DISABLED (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a m·ªÅm th√†nh c√¥ng',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/avatar/{id}': {
      get: {
        tags: ['User'],
        summary: 'L·∫•y avatar ng∆∞·ªùi d√πng',
        description: 'L·∫•y URL avatar c·ªßa ng∆∞·ªùi d√πng (c√¥ng khai)',
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'URL avatar c·ªßa ng∆∞·ªùi d√πng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                      },
                    },
                    avatarUrl: { type: 'string', nullable: true },
                  },
                },
              },
            },
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['User'],
        summary: 'Upload avatar ng∆∞·ªùi d√πng',
        description: 'Upload ·∫£nh ƒë·∫°i di·ªán cho ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE ho·∫∑c SELF_ACCESS)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  avatar: {
                    type: 'string',
                    format: 'binary',
                    description: 'File ·∫£nh ƒë·∫°i di·ªán',
                  },
                },
                required: ['avatar'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Upload avatar th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        avatar: { type: 'string' },
                      },
                    },
                    avatarUrl: { type: 'string' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Kh√¥ng c√≥ file ƒë∆∞·ª£c upload',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/{id}/change-password': {
      post: {
        tags: ['User'],
        summary: 'Thay ƒë·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng',
        description: 'Thay ƒë·ªïi m·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  newPassword: { type: 'string', format: 'password', description: 'M·∫≠t kh·∫©u m·ªõi' },
                },
                required: ['newPassword'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Thay ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/{id}/restore': {
      post: {
        tags: ['User'],
        summary: 'Kh√¥i ph·ª•c ng∆∞·ªùi d√πng',
        description: 'Kh√¥i ph·ª•c ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a m·ªÅm (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Kh√¥i ph·ª•c th√†nh c√¥ng',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/{id}/role': {
      put: {
        tags: ['User'],
        summary: 'G√°n vai tr√≤ cho ng∆∞·ªùi d√πng',
        description: 'G√°n vai tr√≤ cho ng∆∞·ªùi d√πng (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa ng∆∞·ªùi d√πng',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  roleName: { type: 'string', description: 'T√™n vai tr√≤' },
                },
                required: ['roleName'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'G√°n vai tr√≤ th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        email: { type: 'string' },
                        roleName: { type: 'string' },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                            permissions: {
                              type: 'array',
                              items: {
                                type: 'object',
                                properties: {
                                  code: { type: 'string' },
                                  name: { type: 'string' },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/role/{roleName}': {
      put: {
        tags: ['User'],
        summary: 'L·∫•y ng∆∞·ªùi d√πng theo vai tr√≤',
        description: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng c√≥ vai tr√≤ c·ª• th·ªÉ (y√™u c·∫ßu quy·ªÅn ADMIN_USER_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'roleName',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'T√™n vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch ng∆∞·ªùi d√πng theo vai tr√≤',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        name: { type: 'string' },
                      },
                    },
                    users: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          email: { type: 'string' },
                          phoneNumber: { type: 'string', nullable: true },
                          status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                          avatar: { type: 'string', nullable: true },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/users/profile': {
      get: {
        tags: ['User'],
        summary: 'L·∫•y th√¥ng tin c√° nh√¢n',
        description: 'L·∫•y th√¥ng tin c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        email: { type: 'string' },
                        phoneNumber: { type: 'string', nullable: true },
                        age: { type: 'number', nullable: true },
                        gender: { type: 'string', enum: ['MALE', 'FEMALE'], nullable: true },
                        status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                        avatar: { type: 'string', nullable: true },
                        address: { type: 'string', nullable: true },
                        avatarUrl: { type: 'string', nullable: true },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                            permissions: {
                              type: 'array',
                              items: {
                                type: 'object',
                                properties: {
                                  code: { type: 'string' },
                                  name: { type: 'string' },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['User'],
        summary: 'C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'multipart/form-data': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n ng∆∞·ªùi d√πng' },
                  phoneNumber: { type: 'string', description: 'S·ªë ƒëi·ªán tho·∫°i' },
                  gender: { type: 'string', enum: ['MALE', 'FEMALE'], description: 'Gi·ªõi t√≠nh' },
                  age: { type: 'number', description: 'Tu·ªïi' },
                  address: { type: 'string', description: 'ƒê·ªãa ch·ªâ' },
                  avatar: { type: 'string', format: 'binary', description: 'File ·∫£nh ƒë·∫°i di·ªán' },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    user: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        email: { type: 'string' },
                        phoneNumber: { type: 'string', nullable: true },
                        age: { type: 'number', nullable: true },
                        gender: { type: 'string', enum: ['MALE', 'FEMALE'], nullable: true },
                        status: { type: 'string', enum: ['AVAILABLE', 'DISABLED'] },
                        avatar: { type: 'string', nullable: true },
                        address: { type: 'string', nullable: true },
                        avatarUrl: { type: 'string', nullable: true },
                        role: {
                          type: 'object',
                          properties: {
                            name: { type: 'string' },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Geo
    // Geographic-related paths (new additions)
    '/geo/provinces': {
      get: {
        tags: ['Geo'],
        summary: 'L·∫•y danh s√°ch t·∫•t c·∫£ t·ªânh/th√†nh ph·ªë',
        description: 'L·∫•y danh s√°ch t·∫•t c·∫£ t·ªânh/th√†nh ph·ªë (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch t·ªânh/th√†nh ph·ªë',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    provinces: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          code: { type: 'string' },
                          latitude: { type: 'number', nullable: true },
                          longitude: { type: 'number', nullable: true },
                          status: { type: 'string' },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/provinces/{idOrCode}': {
      get: {
        tags: ['Geo'],
        summary: 'L·∫•y chi ti·∫øt t·ªânh/th√†nh ph·ªë',
        description: 'L·∫•y chi ti·∫øt m·ªôt t·ªânh/th√†nh ph·ªë theo ID ho·∫∑c m√£ (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'idOrCode',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID ho·∫∑c m√£ c·ªßa t·ªânh/th√†nh ph·ªë',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt t·ªânh/th√†nh ph·ªë',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    province: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        code: { type: 'string' },
                        latitude: { type: 'number', nullable: true },
                        longitude: { type: 'number', nullable: true },
                        status: { type: 'string' },
                        districts: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              name: { type: 'string' },
                              latitude: { type: 'number', nullable: true },
                              longitude: { type: 'number', nullable: true },
                              status: { type: 'string' },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/provinces/{provinceIdOrCode}/districts': {
      get: {
        tags: ['Geo'],
        summary: 'L·∫•y danh s√°ch qu·∫≠n/huy·ªán c·ªßa t·ªânh/th√†nh ph·ªë',
        description: 'L·∫•y danh s√°ch qu·∫≠n/huy·ªán thu·ªôc m·ªôt t·ªânh/th√†nh ph·ªë (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'provinceIdOrCode',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID ho·∫∑c m√£ c·ªßa t·ªânh/th√†nh ph·ªë',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch qu·∫≠n/huy·ªán',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    province: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        code: { type: 'string' },
                      },
                    },
                    districts: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          latitude: { type: 'number', nullable: true },
                          longitude: { type: 'number', nullable: true },
                          status: { type: 'string' },
                          _count: {
                            type: 'object',
                            properties: {
                              wards: { type: 'number' },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh ph·ªë',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/districts/{districtIdOrCode}': {
      get: {
        tags: ['Geo'],
        summary: 'L·∫•y chi ti·∫øt qu·∫≠n/huy·ªán',
        description: 'L·∫•y chi ti·∫øt m·ªôt qu·∫≠n/huy·ªán theo ID (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'districtIdOrCode',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa qu·∫≠n/huy·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt qu·∫≠n/huy·ªán',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    district: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        latitude: { type: 'number', nullable: true },
                        longitude: { type: 'number', nullable: true },
                        status: { type: 'string' },
                        wards: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              name: { type: 'string' },
                              latitude: { type: 'number', nullable: true },
                              longitude: { type: 'number', nullable: true },
                              status: { type: 'string' },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y qu·∫≠n/huy·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/districts/{districtIdOrCode}/wards': {
      get: {
        tags: ['Geo'],
        summary: 'L·∫•y danh s√°ch ph∆∞·ªùng/x√£ c·ªßa qu·∫≠n/huy·ªán',
        description: 'L·∫•y danh s√°ch ph∆∞·ªùng/x√£ thu·ªôc m·ªôt qu·∫≠n/huy·ªán (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'districtIdOrCode',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa qu·∫≠n/huy·ªán',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch ph∆∞·ªùng/x√£',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    district: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                      },
                    },
                    wards: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          latitude: { type: 'number', nullable: true },
                          longitude: { type: 'number', nullable: true },
                          status: { type: 'string' },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y qu·∫≠n/huy·ªán',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/geo/search': {
      get: {
        tags: ['Geo'],
        summary: 'T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm',
        description: 'T√¨m ki·∫øm t·ªânh/th√†nh ph·ªë, qu·∫≠n/huy·ªán, ph∆∞·ªùng/x√£ theo t·ª´ kh√≥a (y√™u c·∫ßu x√°c th·ª±c)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'query',
            schema: { type: 'string' },
            required: true,
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm (t·ªëi thi·ªÉu 2 k√Ω t·ª±)',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    results: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          latitude: { type: 'number', nullable: true },
                          longitude: { type: 'number', nullable: true },
                          status: { type: 'string' },
                          type: { type: 'string', enum: ['PROVINCE', 'DISTRICT', 'WARD'] },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm qu√° ng·∫Øn ho·∫∑c kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Role
    '/roles': {
      get: {
        tags: ['Role'],
        summary: 'L·∫•y danh s√°ch vai tr√≤',
        description:
          'L·∫•y danh s√°ch vai tr√≤ v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm',
          },
          {
            in: 'query',
            name: 'searchFields',
            schema: { type: 'string' },
            description: 'C√°c tr∆∞·ªùng t√¨m ki·∫øm, c√°ch nhau b·ªüi d·∫•u ph·∫©y (m·∫∑c ƒë·ªãnh: name,description)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"name","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"ACTIVE"})',
          },
          {
            in: 'query',
            name: 'returnAll',
            schema: { type: 'boolean' },
            description: 'Tr·∫£ v·ªÅ t·∫•t c·∫£ d·ªØ li·ªáu (b·ªè qua ph√¢n trang)',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch vai tr√≤',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          name: { type: 'string' },
                          description: { type: 'string', nullable: true },
                          permissions: {
                            type: 'array',
                            items: {
                              type: 'object',
                              properties: {
                                id: { type: 'string' },
                                code: { type: 'string' },
                                name: { type: 'string' },
                                description: { type: 'string', nullable: true },
                              },
                            },
                          },
                        },
                      },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Role'],
        summary: 'T·∫°o vai tr√≤ m·ªõi',
        description: 'T·∫°o m·ªôt vai tr√≤ m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n vai tr√≤' },
                  description: { type: 'string', description: 'M√¥ t·∫£ vai tr√≤', nullable: true },
                  permissionIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Danh s√°ch ID c·ªßa c√°c quy·ªÅn',
                  },
                },
                required: ['name'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'T·∫°o vai tr√≤ th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        permissions: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              code: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'T√™n vai tr√≤ ƒë√£ t·ªìn t·∫°i ho·∫∑c quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/roles/{id}': {
      get: {
        tags: ['Role'],
        summary: 'L·∫•y chi ti·∫øt vai tr√≤',
        description: 'L·∫•y chi ti·∫øt m·ªôt vai tr√≤ theo ID (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt vai tr√≤',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        permissions: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              code: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Role'],
        summary: 'C·∫≠p nh·∫≠t vai tr√≤',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin vai tr√≤ (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string', description: 'T√™n vai tr√≤' },
                  description: { type: 'string', description: 'M√¥ t·∫£ vai tr√≤', nullable: true },
                  permissionIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Danh s√°ch ID c·ªßa c√°c quy·ªÅn',
                  },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        permissions: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              code: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'T√™n vai tr√≤ ƒë√£ t·ªìn t·∫°i ho·∫∑c quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Role'],
        summary: 'X√≥a vai tr√≤',
        description:
          'X√≥a m·ªôt vai tr√≤ (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE, kh√¥ng th·ªÉ x√≥a n·∫øu vai tr√≤ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a vai tr√≤ th√†nh c√¥ng',
          },
          '400': {
            description: 'Vai tr√≤ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi d√πng',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/roles/{id}/permissions': {
      put: {
        tags: ['Role'],
        summary: 'C·∫≠p nh·∫≠t quy·ªÅn c·ªßa vai tr√≤',
        description: 'G√°n ho·∫∑c c·∫≠p nh·∫≠t danh s√°ch quy·ªÅn cho vai tr√≤ (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_ROLE_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa vai tr√≤',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  permissionIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Danh s√°ch ID c·ªßa c√°c quy·ªÅn',
                  },
                },
                required: ['permissionIds'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t quy·ªÅn th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        permissions: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              code: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_ROLE_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y vai tr√≤',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    // Permission
    '/permissions': {
      get: {
        tags: ['Permission'],
        summary: 'L·∫•y danh s√°ch quy·ªÅn',
        description:
          'L·∫•y danh s√°ch quy·ªÅn v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            in: 'query',
            name: 'page',
            schema: { type: 'integer', minimum: 1 },
            description: 'S·ªë trang',
          },
          {
            in: 'query',
            name: 'pageSize',
            schema: { type: 'integer', minimum: 1 },
            description: 'K√≠ch th∆∞·ªõc trang',
          },
          {
            in: 'query',
            name: 'search',
            schema: { type: 'string' },
            description: 'T·ª´ kh√≥a t√¨m ki·∫øm',
          },
          {
            in: 'query',
            name: 'searchFields',
            schema: { type: 'string' },
            description: 'C√°c tr∆∞·ªùng t√¨m ki·∫øm, c√°ch nhau b·ªüi d·∫•u ph·∫©y (m·∫∑c ƒë·ªãnh: code,name,description)',
          },
          {
            in: 'query',
            name: 'sort',
            schema: { type: 'string' },
            description: 'S·∫Øp x·∫øp (JSON string, v√≠ d·ª•: {"field":"name","direction":"asc"})',
          },
          {
            in: 'query',
            name: 'filters',
            schema: { type: 'string' },
            description: 'B·ªô l·ªçc (JSON string, v√≠ d·ª•: {"status":"ACTIVE"})',
          },
          {
            in: 'query',
            name: 'returnAll',
            schema: { type: 'boolean' },
            description: 'Tr·∫£ v·ªÅ t·∫•t c·∫£ d·ªØ li·ªáu (b·ªè qua ph√¢n trang)',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Danh s√°ch quy·ªÅn',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    data: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          id: { type: 'string' },
                          code: { type: 'string' },
                          name: { type: 'string' },
                          description: { type: 'string', nullable: true },
                          roles: {
                            type: 'array',
                            items: {
                              type: 'object',
                              properties: {
                                id: { type: 'string' },
                                name: { type: 'string' },
                                description: { type: 'string', nullable: true },
                              },
                            },
                          },
                        },
                      },
                    },
                    total: { type: 'number' },
                    page: { type: 'number' },
                    pageSize: { type: 'number' },
                    totalPages: { type: 'number' },
                  },
                },
              },
            },
          },
          '400': {
            description: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      post: {
        tags: ['Permission'],
        summary: 'T·∫°o quy·ªÅn m·ªõi',
        description: 'T·∫°o m·ªôt quy·ªÅn m·ªõi (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE)',
        security: [{ bearerAuth: [] }],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  code: { type: 'string', description: 'M√£ quy·ªÅn' },
                  name: { type: 'string', description: 'T√™n quy·ªÅn' },
                  description: { type: 'string', description: 'M√¥ t·∫£ quy·ªÅn', nullable: true },
                },
                required: ['code', 'name'],
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'T·∫°o quy·ªÅn th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    permission: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        code: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'M√£ quy·ªÅn ƒë√£ t·ªìn t·∫°i',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
    '/permissions/{id}': {
      get: {
        tags: ['Permission'],
        summary: 'L·∫•y chi ti·∫øt quy·ªÅn',
        description: 'L·∫•y chi ti·∫øt m·ªôt quy·ªÅn theo ID (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa quy·ªÅn',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'Chi ti·∫øt quy·ªÅn',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    permission: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        code: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                        roles: {
                          type: 'array',
                          items: {
                            type: 'object',
                            properties: {
                              id: { type: 'string' },
                              name: { type: 'string' },
                              description: { type: 'string', nullable: true },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y quy·ªÅn',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      put: {
        tags: ['Permission'],
        summary: 'C·∫≠p nh·∫≠t quy·ªÅn',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin quy·ªÅn (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa quy·ªÅn',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  code: { type: 'string', description: 'M√£ quy·ªÅn' },
                  name: { type: 'string', description: 'T√™n quy·ªÅn' },
                  description: { type: 'string', description: 'M√¥ t·∫£ quy·ªÅn', nullable: true },
                },
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'C·∫≠p nh·∫≠t quy·ªÅn th√†nh c√¥ng',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    permission: {
                      type: 'object',
                      properties: {
                        id: { type: 'string' },
                        code: { type: 'string' },
                        name: { type: 'string' },
                        description: { type: 'string', nullable: true },
                      },
                    },
                  },
                },
              },
            },
          },
          '400': {
            description: 'M√£ quy·ªÅn ƒë√£ t·ªìn t·∫°i',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y quy·ªÅn',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
      delete: {
        tags: ['Permission'],
        summary: 'X√≥a quy·ªÅn',
        description:
          'X√≥a m·ªôt quy·ªÅn (y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn ADMIN_PERMISSION_MANAGE, kh√¥ng th·ªÉ x√≥a n·∫øu quy·ªÅn ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng)',
        security: [{ bearerAuth: [] }],
        parameters: [
          {
            name: 'id',
            in: 'path',
            required: true,
            schema: { type: 'string' },
            description: 'ID c·ªßa quy·ªÅn',
          },
          {
            in: 'query',
            name: 'lang',
            schema: { type: 'string' },
            description: 'Ng√¥n ng·ªØ ph·∫£n h·ªìi (m·∫∑c ƒë·ªãnh: en)',
          },
        ],
        responses: {
          '200': {
            description: 'X√≥a quy·ªÅn th√†nh c√¥ng',
          },
          '400': {
            description: 'Quy·ªÅn ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi vai tr√≤',
          },
          '401': {
            description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
          },
          '403': {
            description: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá (thi·∫øu ADMIN_PERMISSION_MANAGE)',
          },
          '404': {
            description: 'Kh√¥ng t√¨m th·∫•y quy·ªÅn',
          },
          '500': {
            description: 'L·ªói server',
          },
        },
      },
    },
  },
  components: {
    securitySchemes: {
      bearerAuth: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
      },
    },
  },
};
