// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model SystemConfig {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  rateLimit       Int @default(5)
  rateLimitWindow Int @default(3600)

  isMaintaining        Boolean   @default(false)
  maintenanceStartTime DateTime?
  maintenanceEndTime   DateTime?

  emailRateLimit       Int @default(5)
  emailRateLimitWindow Int @default(3600)

  maxLoginAttempts  Int @default(5)
  loginLockDuration Int @default(900)

  status SystemConfigStatus @default(ACTIVE)

  lastUpdatedBy String?  @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Province {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  code      String @unique
  latitude  Float?
  longitude Float?

  status    CommonStatus @default(ACTIVE)
  isDeleted Boolean      @default(false)

  districts           District[]
  routesAsSource      Route[]    @relation("RouteSourceProvince")
  routesAsDestination Route[]    @relation("RouteDestinationProvince")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model District {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  provinceId String   @db.ObjectId
  province   Province @relation(fields: [provinceId], references: [id])

  wards Ward[]

  latitude  Float?
  longitude Float?

  status    CommonStatus @default(ACTIVE)
  isDeleted Boolean      @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Ward {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  districtId String   @db.ObjectId
  district   District @relation(fields: [districtId], references: [id])

  busStops BusStop[]

  latitude  Float?
  longitude Float?

  status    CommonStatus @default(ACTIVE)
  isDeleted Boolean      @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Route {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  code      String  @unique
  name      String
  direction String?
  image     String?

  sourceProvinceId String   @db.ObjectId
  sourceProvince   Province @relation("RouteSourceProvince", fields: [sourceProvinceId], references: [id])

  destinationProvinceId String   @db.ObjectId
  destinationProvince   Province @relation("RouteDestinationProvince", fields: [destinationProvinceId], references: [id])

  distance          Float
  distanceUnit      DistanceUnit @default(KM)
  estimatedDuration Int

  status    CommonStatus @default(ACTIVE)
  isDeleted Boolean      @default(false)

  routeStops RouteStop[]
  trips      Trip[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Lịch sử thay đổi quan trọng
  histories RouteHistory[]
}

model RouteHistory {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  routeId String @db.ObjectId
  route   Route  @relation(fields: [routeId], references: [id])

  changedFields Json
  changedBy     String   @db.ObjectId
  changeReason  String?
  createdAt     DateTime @default(now())
}

// Bus Stop Management
model BusStop {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  wardId String @db.ObjectId
  ward   Ward   @relation(fields: [wardId], references: [id])

  latitude  Float?
  longitude Float?

  status    CommonStatus @default(ACTIVE)
  isDeleted Boolean      @default(false)

  routeStops RouteStop[]
  stopPrices TripStopPrice[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// Route Stops (Mapping route to stops with estimated times)
model RouteStop {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  routeId String @db.ObjectId
  route   Route  @relation(fields: [routeId], references: [id])

  busStopId String  @db.ObjectId
  busStop   BusStop @relation(fields: [busStopId], references: [id])

  stopOrder Int

  estimatedArrivalTime   DateTime?
  estimatedDepartureTime DateTime?

  status    CommonStatus @default(ACTIVE)
  isDeleted Boolean      @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model VehicleType {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String  @unique
  description       String?
  seatConfiguration Json

  status    CommonStatus @default(ACTIVE)
  isDeleted Boolean      @default(false)

  vehicles Vehicle[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Lịch sử thay đổi quan trọng
  histories VehicleTypeHistory[]
}

model VehicleTypeHistory {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  vehicleTypeId String      @db.ObjectId
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])

  changedFields Json
  changedBy     String   @db.ObjectId
  changeReason  String?
  createdAt     DateTime @default(now())
}

// Vehicle Management
model Vehicle {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  plateNumber      String  @unique
  registrationCode String  @unique
  image            String?

  vehicleTypeId String      @db.ObjectId
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])

  driverId String? @db.ObjectId
  driver   User?   @relation(fields: [driverId], references: [id])

  registrationExpiryDate DateTime
  status                 VehicleStatus @default(ACTIVE)
  isDeleted              Boolean       @default(false)

  trips Trip[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  histories VehicleHistory[]
}

model VehicleHistory {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  changedFields Json
  changedBy     String   @db.ObjectId
  changeReason  String?
  createdAt     DateTime @default(now())
}

model Trip {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  image String?

  // Route Information
  routeId String @db.ObjectId
  route   Route  @relation(fields: [routeId], references: [id])

  // Vehicle Information
  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  // Timing Information
  departureTime DateTime
  arrivalTime   DateTime

  // Pricing
  basePrice    Float
  specialPrice Float?

  // Trip Status
  status TripStatus @default(SCHEDULED)

  // Seat Management
  seats        Seat[]
  bookingTrips BookingTrip[]
  stopPrices   TripStopPrice[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Lịch sử thay đổi quan trọng
  histories     TripHistory[]
  notifications Notification[]
}

model TripStopPrice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId    String   @db.ObjectId
  trip      Trip     @relation(fields: [tripId], references: [id])
  busStopId String   @db.ObjectId
  busStop   BusStop  @relation(fields: [busStopId], references: [id])
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TripHistory {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  tripId String @db.ObjectId
  trip   Trip   @relation(fields: [tripId], references: [id])

  changedFields Json
  changedBy     String   @db.ObjectId
  changeReason  String?
  createdAt     DateTime @default(now())
}

// Seat Management
model Seat {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  tripId String @db.ObjectId
  trip   Trip   @relation(fields: [tripId], references: [id])

  seatNumber String
  seatType   SeatType @default(STANDARD)

  status    SeatStatus @default(AVAILABLE)
  isDeleted Boolean    @default(false)

  bookingTripId String?      @db.ObjectId
  bookingTrip   BookingTrip? @relation(fields: [bookingTripId], references: [id])
  tickets       Ticket[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Voucher {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  code        String  @unique
  name        String
  description String?

  discountType         VoucherDiscountType
  applicableConditions Json?

  discountValue Float

  minOrderValue     Float?
  maxDiscountAmount Float?

  usageLimit   Int?
  usedCount    Int  @default(0)
  perUserLimit Int?

  applicableRoutes       String[] @db.ObjectId
  applicableVehicleTypes String[] @db.ObjectId

  startDate DateTime
  endDate   DateTime

  status    CommonStatus @default(ACTIVE)
  isDeleted Boolean      @default(false)

  usages VoucherUsage[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Lịch sử thay đổi quan trọng
  histories VoucherHistory[]
}

model VoucherHistory {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  voucherId String  @db.ObjectId
  voucher   Voucher @relation(fields: [voucherId], references: [id])

  changedFields Json
  changedBy     String   @db.ObjectId
  changeReason  String?
  createdAt     DateTime @default(now())
}

// Lịch Sử Sử Dụng Voucher
model VoucherUsage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  voucherId String  @db.ObjectId
  voucher   Voucher @relation(fields: [voucherId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  bookingId String  @unique @db.ObjectId
  booking   Booking @relation(fields: [bookingId], references: [id])

  discountAmount Float

  createdAt DateTime @default(now())
}

model Role {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?

  // Store permission IDs directly
  permissionIds String[] @db.ObjectId

  // Relation fields
  permissions Permission[] @relation(fields: [permissionIds], references: [id])
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  code        String  @unique
  name        String
  description String?

  // Store role IDs directly
  roleIds String[] @db.ObjectId

  // Relation fields
  roles Role[] @relation(fields: [roleIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName               String
  lastName                String
  email                   String    @unique
  password                String
  resetPasswordToken      String?
  resetPasswordExpire     DateTime?
  isEmailVerified         Boolean   @default(false)
  emailVerificationToken  String?
  emailVerificationExpire DateTime?

  // Ensure roleId is also @db.ObjectId
  roleName       String
  role           Role             @relation(fields: [roleName], references: [name])
  gender         Gender?
  phoneNumber    String?
  googleId       String?
  avatar         String?
  birthday       DateTime
  address        String?
  status         UserStatus       @default(PENDING)
  bookings       Booking[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  loginSessions  LoginSession[]
  Vehicle        Vehicle[]
  SupportMessage SupportMessage[]
  SupportSession SupportSession[]
  userSessions   SupportSession[] @relation("UserSupportSessions")
  agentSessions  SupportSession[] @relation("AgentSupportSessions")
  voucherUsages  VoucherUsage[]
  notifications  Notification[]

  posts Post[]
}

model LoginSession {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  user           User          @relation(fields: [userId], references: [id])
  ip             String
  userAgent      String
  loginAt        DateTime      @default(now())
  lastActivityAt DateTime      @updatedAt
  logoutAt       DateTime?
  isActive       Boolean       @default(true)
  refreshToken   RefreshToken?
}

model RefreshToken {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  token     String       @unique
  sessionId String       @unique @db.ObjectId
  session   LoginSession @relation(fields: [sessionId], references: [id])
  createdAt DateTime     @default(now())
  expiresAt DateTime
  isRevoked Boolean      @default(false)
}

// Chat Support Session
model SupportSession {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  // Users in the session
  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])

  user User @relation("UserSupportSessions", fields: [userId], references: [id])

  supportAgentId String?              @db.ObjectId
  supportAgent   User?                @relation("AgentSupportSessions", fields: [supportAgentId], references: [id])
  // Session Details
  status         SupportSessionStatus @default(PENDING)
  requestType    SupportRequestType

  // Message Limits
  initialMessageQuota   Int @default(3)
  remainingMessageQuota Int @default(3)

  // Timestamps and Tracking
  startedAt DateTime  @default(now())
  endedAt   DateTime?

  // Messages
  messages SupportMessage[]

  // Reporting
  userReportStatus UserReportStatus?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Support Messages
model SupportMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Session Association
  sessionId String         @db.ObjectId
  session   SupportSession @relation(fields: [sessionId], references: [id])

  // Message Details
  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id])

  content   String
  timestamp DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  guestName      String?
  guestEmail     String?
  guestPhone     String?
  isGuestBooking Boolean @default(false)

  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  isDeleted     Boolean       @default(false)

  totalPrice     Float
  discountAmount Float?
  finalPrice     Float

  qrCode          String?
  qrCodeExpiresAt DateTime?

  groupBookingId String?

  paymentWebhookReference String?

  bookingTrips  BookingTrip[]
  tickets       Ticket[]
  notifications Notification[]

  voucherUsage VoucherUsage?

  customerNotes String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  histories  BookingHistory[]
  PaymentLog PaymentLog[]
}

model BookingHistory {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  bookingId String  @db.ObjectId
  booking   Booking @relation(fields: [bookingId], references: [id])

  changedFields Json
  changedBy     String   @db.ObjectId
  changeReason  String?
  createdAt     DateTime @default(now())
}

model BookingTrip {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  bookingId String  @db.ObjectId
  booking   Booking @relation(fields: [bookingId], references: [id])
  tripId    String  @db.ObjectId
  trip      Trip    @relation(fields: [tripId], references: [id])

  seats   Seat[]
  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  bookingTripId String      @db.ObjectId
  bookingTrip   BookingTrip @relation(fields: [bookingTripId], references: [id])

  bookingId String  @db.ObjectId
  booking   Booking @relation(fields: [bookingId], references: [id])

  seatId String @db.ObjectId
  seat   Seat   @relation(fields: [seatId], references: [id])

  passengerName  String
  passengerPhone String?

  ticketNumber String  @unique
  qrCode       String  @unique
  qrCodeImage  String?

  printCount    Int       @default(0)
  lastPrintedAt DateTime?

  status TicketStatus @default(PENDING)

  // Thông tin check-in
  isCheckedIn Boolean   @default(false)
  checkedInAt DateTime?
  checkedInBy String?   @db.ObjectId

  // Metadata về vé
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notifications Notification[]
}

model PaymentLog {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  bookingId String  @db.ObjectId
  booking   Booking @relation(fields: [bookingId], references: [id])

  // Thông tin thanh toán
  gateway       String
  transactionId String?
  amount        Float
  currency      String

  // Trạng thái thanh toán
  status PaymentLogStatus

  // Chi tiết webhook
  rawPayload  Json?
  matchStatus PaymentMatchStatus

  expectedAmount Float
  receivedAmount Float

  discrepancyReason String?

  createdAt DateTime @default(now())
}

model SnapshotLog {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  entityId           String   @db.ObjectId
  entityType         String
  actionType         String
  compressedSnapshot Bytes
  metadata           Json?
  performedBy        String?  @db.ObjectId
  createdAt          DateTime @default(now())

  @@index([entityId, entityType])
  @@index([createdAt])
}

model Post {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String  @unique
  // For SEO-friendly URLs 
  content         String // Main post content (e.g., HTML or Markdown) 
  excerpt         String? // Short summary for previews 
  featuredImage   String? // URL or path to main image 
  authorId        String  @db.ObjectId
  author          User    @relation(fields: [authorId], references: [id])
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?

  // Categorization and Tagging 
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])
  postTags   PostTag[]

  // Publication Details 
  status      PostStatus @default(DRAFT)
  isDeleted   Boolean    @default(false)
  publishedAt DateTime?
  scheduledAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Change History 
  histories PostHistory[]
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  slug        String  @unique
  description String?

  posts Post[]

  status    CommonStatus @default(ACTIVE)
  isDeleted Boolean      @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  slug String @unique

  postTags PostTag[]

  status CommonStatus @default(ACTIVE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PostTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  tagId  String @db.ObjectId
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
}

model PostHistory {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  postId        String   @db.ObjectId
  post          Post     @relation(fields: [postId], references: [id])
  changedFields Json
  changedBy     String   @db.ObjectId
  changeReason  String?
  createdAt     DateTime @default(now())
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  type     NotificationType
  category NotificationCategory

  title   String
  message String

  // Liên kết với các thực thể khác
  bookingId String?  @db.ObjectId
  booking   Booking? @relation(fields: [bookingId], references: [id])

  tripId String? @db.ObjectId
  trip   Trip?   @relation(fields: [tripId], references: [id])

  ticketId String? @db.ObjectId
  ticket   Ticket? @relation(fields: [ticketId], references: [id])

  // Trạng thái đọc
  isRead Boolean   @default(false)
  readAt DateTime?

  // Dữ liệu bổ sung
  additionalData Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CommonStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum SystemConfigStatus {
  ACTIVE
  MAINTENANCE
}

enum UserStatus {
  AVAILABLE
  DISABLED
  PENDING
}

enum Gender {
  MALE
  FEMALE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum DistanceUnit {
  KM
  MILE
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  IDLE
  MAINTENANCE
}

enum TripStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SeatType {
  STANDARD
  BED
  PREMIUM
  ACCESSIBLE
  DRIVER
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  BOOKED
  BLOCKED
}

enum SupportSessionStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SupportRequestType {
  BOOKING_SUPPORT
  GENERAL_INQUIRY
  TECHNICAL_ISSUE
  COMPLAINT
}

enum UserReportStatus {
  NO_REPORT
  UNDER_REVIEW
  WARNED
  BLOCKED
}

enum VoucherDiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  STARRED
  ARCHIVED
}

enum TicketStatus {
  PENDING
  VALID
  CHECKED_IN
  EXPIRED
  CANCELLED
}

enum PaymentLogStatus {
  PENDING
  SUCCESSFUL
  FAILED
  DISPUTED
}

enum PaymentMatchStatus {
  EXACT_MATCH
  AMOUNT_MISMATCH
  REFERENCE_MISMATCH
  PARTIAL_MATCH
}

enum NotificationType {
  BOOKING_CREATED
  BOOKING_UPDATED
  BOOKING_CANCELLED
  TICKET_GENERATED
  TICKET_PRINTED
  TICKET_CHECKED_IN
  TRIP_BOARDING_SOON
  TRIP_DELAYED
  TRIP_STATUS_CHANGED
  PAYMENT_SUCCESSFUL
  PAYMENT_FAILED
}

enum NotificationCategory {
  BOOKING
  TICKET
  TRIP
  PAYMENT
  SYSTEM
}
